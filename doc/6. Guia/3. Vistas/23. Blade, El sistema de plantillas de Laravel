23. Blade, El sistema de plantillas de Laravel

Notas:
======

Comenzaremos a aprender sobre Blade, el sistema de plantillas de Laravel, el cual nos provee de muchas características que deberíamos tener en un lenguaje de plantillas, como por ejemplo la capacidad de escapar los datos de forma automática.


Para utilizar el sistema de plantillas de Laravel debemos renombrar nuestras vistas para que tengan la extensión .blade.php.


Imprimir variables
------------------

Si queremos imprimir una variable, podemos hacerlo utilizando la sintaxis de dobles llaves {{ }}
---
	<li>{{ $user }}</li>
	Ciclos y estructuras
---


Ciclos y estructuras condicionales
-----------------------------

Si queremos utilizar ciclos y estructuras condicionales, podemos utilizar directivas. Las directivas de Blade van precedidas por un arroba (@) y luego el nombre de la directiva:
---
	@foreach ($users as $user)
	    <li>{{ $user }}</li>
	@endforeach
---

También podemos utilizar la directiva @if:
--
	@if (! empty($users))
	    ...-
	@endif
---

La directiva @if puede ser utilizada junto con un bloque else (utilizando @else):
---
	@if (! empty($users))
	    ...
	@else
	    <p>No hay usuarios registrados.</p>
	@endif
---

Podemos utilizar la directiva @elseif, que como su nombre sugiere nos permite utilizar un bloque else if:
---
	@if (! empty($users))
	    ...
	@elseif ($users < 3)
	    <p>Hay menos de 3 usuarios registrados.</p>
	@else
	    <p>No hay usuarios registrados.</p>
	@endif
---

Blade también tiene la directiva @unless, que funciona como un condicional inverso:
---
	@unless (empty($users))
	    <ul>
	        @foreach ($users as $user)
	            <li>{{ $user }}</li>
	        @endforeach
	    </ul>
	@else
	    <p>No hay usuarios registrados.</p>
	@endunless
---

En el ejemplo anterior queremos mostrar el listado de usuarios a no ser que la lista esté vacia. De lo contrario queremos mostrar el mensaje del bloque else.

También podemos utilizar la directiva @empty que es una forma más corta de escribir @if (empty (...))
---
@empty($users)
    <p>No hay usuarios registrados.</p>
@else
    <ul>
        @foreach ($users as $user)
            <li>{{ $user }}</li>
        @endforeach
    </ul>
@endempty
---

En este caso por supuesto invertimos los bloques dentro del condicional.

Además de @foreach, también podemos utilizar @for:
---
	@for ($i = 0; $i < 10; $i++)
	    El valor actual es {{ $i }}
	@endfor
---

Con la directiva @forelse podemos asignar una opción por defecto a un ciclo foreach sin utilizar bloques anidados:
---
	@forelse ($users as $user)
	    <li>{{ $user }}</li>
	@empty
	    <li>No hay usuarios registrados.</li>
	@endforelse
---

Cuando utilizamos la sintaxis de dobles llaves Blade nos protege automáticamente de ataques XSS.

Vistas en caché
---------------
Laravel compila y guarda en caché nuestras vistas, por lo que usar el motor de plantillas Blade no afecta el rendimiento de nuestra aplicación. Puedes ver estas vistas compiladas en el directorio /storage/framework/views.

Utilizando el comando view:clear podemos eliminar desde la terminal la vistas en caché:
	> php artisan view:clear






Practica
========

En este seccion, vamos a tratar el tema de Blade, el sistema de Plantillas de Laravel.PHP, se creo como como un lenguaje de plantillas para generar páginas dinamicas en HTML, a medida que paso el tiempo sobnre todo a partir de la version 5, PHP se convirtio en un lenguaje robusto de programación orientado a objetos, Hoy dia e ironicamante ya no es un buen lenguaje para generar plantillas. Es decir la sintaxis no es tan agradable, y hay caracteristicas por ejemplo que deberiamos de tener en un lenguaje de plantillas omo la capacidad de escapar los datos dinamicos, de forma automatica que en PHP debemos hacerlo manualmente y por supuesto no se nos puede olvidar hacerlo. Asi que para tener esta caracteristica varios desarrolladores han creado diversos motores de plantillas para PHP, por ejemplo tenemos Smarty que ya tiene algo de timepo, si se trabaja con Symfony, actualmente trabaja con un motor de plantillas llamado Tweak. Laravel no se queda atras e incluye su propio motor de plantillas, en este caso llmado Blade y vamos a ver como se tutiliza.

si por ejemplo queremos imprimir algo como la variable $users

---
<ul>
	@foreach ($users as $user)
	    <li>{{ $user }}</li>
	@endforeach
</ul>
---

Debemos utilizar dobles llaves como se muestra anteriormente, colocando entre ellas la variable que se quiere imprimir, pero tambien se pueden colocar otras expresiones de PHP como llamados a funciones, y de igual forma para imprimir el titulo


---
<h1>{{ $title }}</h1>
<ul>
	@foreach ($users as $user)
	    <li>{{ $user }}</li>
	@endforeach
</ul>
---



Ciclos
---------
Por otro lado si queremos hacer ciclos, condicionales y otras estructuras de control entonces vamos a utilizar directivas. Ya que en lugar en ves de tener que abrir y cerrar llaves de PHP y cuidando de poner los dos puntos, etcvamos a utilizar una sintaxis mucho mas simple. Son las directivas de Blade. Las cuales van precedidas por un @, por ejemplo el nombr de una directiva. Por ejemplo:

---
<ul>
	@foreach ($users as $user):
	    <li>{{ $user }}</li>
	@endforeach
</ul>  
---

Para cerrar el condicional lo hago mediante la directiva @endforeach. SIn embargo si yo hago esto y regreso al navegador recargando la página no va a funcionar:
	http://127.0.0.1:8000/usuarios

Ya que estaremos viendo todo el codigo de forma estatica y si se ejecuta la prueba

De:
--- /resources/views/users.php
<body>
	<h1><?= e($title)  ?></h1>

	<ul>
		<?php foreach ($users as $user): ?>
			<li><?= e($user) ?></li>
		<?php endforeach; ?>
	</ul>
</body>
---


Se convierte y renombra a
--- /resources/views/users.blade.php
<body>
	<h1><?= e($title)  ?></h1>

	<ul>
		@foreach ($users as $user)
			<li>{{ $user }} </li>
		@endforeach
	</ul>
</body>
---

Haciendo la pruebas en terminal
	> t

	.array:2 [
	  "title" => "Listado de usuarios"
	  "users" => array:6 [
	    0 => "Bill"
	    1 => "Ellie"
	    2 => "Joel"
	    3 => "Tess"
	    4 => "Tommy"
	    5 => "<script>alert("Clicker")</script>"
	  ]
	]


O en el navegador
----------------
	http://127.0.0.1:8000/usuarios
	+++
		array:2 [▼
		  "title" => "Listado de usuarios"
		  "users" => array:6 [▼
		    0 => "Bill"
		    1 => "Ellie"
		    2 => "Joel"
		    3 => "Tess"
		    4 => "Tommy"
		    5 => "<script>alert("Clicker")</script>"
		  ]
		]


Se vera nuevamente el listados de los usuarios y el codigo Js se viazualizara escapado. asiq ue no solo utilizar Blade es ´más expresivo y elegante, sino que tambien viene con este agregado de seguridad para la aplicación. ahora hay quienes dicen que no les gusta utilizar un sistema de plantillas por que el Framework tendria que interpretar todo este codigo haciendo el desarrollo mas lento. sin embargo esto no sucede con Blade, ya que Laravel va a compilar y mantener en cache nucestras vistas. Esto lo podemos hacer si revisamos el directorio:
	
	/storage/framework/views/<id_vista_compilada.php>


Entonces podemos ver que nuestra plantilla ha sido compilada, a PHP plano que es mas o menos lo que teniamos antes. Y entonces la segunda vez que solicitemos esta pagina a menos que hagamos cambios en la vista, y se tomara la vista que esta en cache.

A menos que se haga un cambio en la vista, 




Eliminar vistas de cache
-----------------------

Se pueden eliminar las vistas almacenadas en cache desde la consola con el comando:
	>  php artisan view:clear

Pero apenas se recarge la página, enotnces nuevamente Laravel generara la Vista correspondiente.



Quedando de la siguiente manera el primer cambio:

---user.blade.php
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>Listado de Usuarios - Klvst3r</title>
	</head>
	<body>
		<h1>{{ $title }}</h1>

		<hr/>


		<ul>
			@foreach ($users as $user)
				<li>{{ $user }} </li>
			@endforeach
		</ul>
	</body>
	</html>
---
Con el Controlador:
---UserController.php
 $users = [
            'Bill',
            'Ellie',
            'Joel', 
            'Tess',
            'Tommy',
            '<script>alert("Clicker")</script>'
        ];

        $title = 'Listado de usuarios';        
    
        return view('users', compact('title', 'users'));       
---


Basicamante, utilizar Blade es como utilizar PHP plano, no debemos preocuparnos por esto.Y ademas del tema del rendimciento seguridad y elegancia que nos brinda Blade, tambien, tendremos acceso a una serie de directivas y estructuras de control que no existen en PHP, por ejemplo vamos a suponer que nosotros queremos mostrar el listado de usuarios unicamante si tenemos usuarios.

Para lleo nos vamos a ir al controlador del usuario, mediante un pequeño truco:

---/app/Http/UserController.php
...
	 public function index()
	    {
	 if(request()->has('empty')){
	            $users = [];
	       } else {
	             $users = [
	                'Bill',
	                'Ellie',
	                'Joel', 
	                'Tess',
	                'Tommy'
	                
	            ];
	       }
	       


	        $title = 'Listado de usuarios';        
	    
	        return view('users', compact('title', 'users'));        
	}

	    public function show($id)
	    {
	       return "Mostrando detalles del usuario: {$id}";  
	    }
...

---

Se preguntra si la petición contiene el campo empty, si esta vacio entonces el listado de usuarios va a estar vacio, de lo contrario vamos a tener el mismo listado de ususrios de antes. Verificando por las pruebas que no se ha dañado nada asi como en el navegador.

Entonces podemos pasar el campo empty desde la url de la siguiente manera:
	http://127.0.0.1:8000/usuarios?empty

Y en esta ocación veremos que la lista de usuarios desaparece, esto es un pequeño truco para verificar cuando hay un listado vacia o boen no existen datos. Puesto que ahora no estamos utilizando una Bd.


En la vista:
Si no esta vacia la lista mostramos el listado, en caso contrario, enviamos un mensaje.
---user.blade.php
	<body>
		<h1>{{ $title }}</h1>

		<hr/>

		@if (! empty ($users))

			<ul>
				@foreach ($users as $user)
					<li>{{ $user }} </li>
				@endforeach
			</ul>
		@else
			<p>No hay usuarios registrados</p>
		@endif
	</body>	
---	

Mostrando el mensaje de que no hay usuarios registrados, y en la barra de la URL podemos quitar el campo empty, y nuevamente aparece el listado de usuarios.


Documentacion
-------------

Esto lo podemos documentar incluso, mediante pruebas automatiza<das si regresamos a la prueba.

---/test/Feature/UserModuleTest.php
...
	 //Listado de usuarios
	    function it_shows_the_users_list()
	    {
	       // $this->assertTrue(true);
	         $this->get('/usuarios')
	            ->assertStatus(200)
	            ->assertSee('Listado de usuarios')
	            ->assertSee('Joel')
	            ->assertSee('Ellie');

	    }


	    //Mostramos un mensaje por defecto si la lista esta vacia
	     function it_shows_a_default_message_if_the_users_list_is_empty()
	    {
	         $this->get('/usuarios?empty ') //Pasamos un array vacio a la vista
	            ->assertStatus(200)
	            ->assertSee('No hay usuarios registrados.')
	            ->assertSee('Joel')
	            ->assertSee('Ellie');

	    }   

...	
---

Y creamos una nueva prueba,   con dos metodos una para listar a los usuarios y un segundo metodo para mostrar un mensaje por default cuando el listado de usuarios esta vacio.


Regresamos a la consola y al navegador para hacer las pruebas pertinentes
	> t

aunque la prueba pasa a la primera, podemos ser un poco sospechosos, y podemos comprobar doblemente que l aprueba esta funcionando es:

---UserController.php
 //3r Cambio
        //Primera verificación
        $users = [
                'Bill',
                'Ellie',
                'Joel', 
                'Tess',
                'Tommy'
                
            ];
       
       
        $title = 'Listado de usuarios';        
    
        return view('users', compact('title', 'users'));       

---
Si del comportamiento de nuestro controlador, quitando el condicional y reejejcutamos la prueba.

Blade tiene otras directivas.

Por ejemplo
De esto:
---user.blade.php
	@if (! empty ($users))

			<ul>
				@foreach ($users as $user)
					<li>{{ $user }} </li>
				@endforeach
			</ul>
		@else
			<p>No hay usuarios registrados</p>
	@endif
---
A esto:
---user.blade.php

	@unless(empty($users))

		<ul>
			@foreach ($users as $user)
				<li>{{ $user }} </li>
			@endforeach
		</ul>
	@else
		<p>No hay usuarios registrados</p>
	@endif
---


Por ejemplo en la vista de usuarios, podemos utilizar directamente la directiva unless que es como un condicional inverso, entonces vas a decir que a menso que la listad e usuarios, este vacia vamos a mostrar el listado de usuarios, de lo contrario voy a mostrar que no hay uisuarios registrados.



Regresando a la consola y al navegador y reejecutamos la prueba, y esta pasa, significa que tenemos el milso comportamiento de antes, por supuesto tenemos tambien que regresar al navegador, y podemos ver que se tiene el mosmo resultado.



Otra directiva - empty
---------------

Podemos utilizar otra directiva llamada empty, en este caso necesitamos invertir el codigo dentro del condicional, y por cierto Laravel contienen directiva para cerrar entocnes estas estructuras de control

---user.blade.php
<hr/>

	@empty($users)
		<p>No hay usuarios registrados</p>
	@else
		<ul>
			@foreach ($users as $user)
				<li>{{ $user }} </li>
			@endforeach
		</ul>
	
	@endempty
</body>
---

Tambien se puede utilizar @endunless si se utiliza en la parte de arriba.

Probando las pruebas dewsde la consullta, para verificar que las pruebas estan pasando.

Podemos hecharle tambien un vistazo nuevamente a nuestra vista en cache y ver que la directiva empty no es mas que una forma rapida de escribir if ampty.

De regreso a la vista user.blade.php tambien podemos utilizar la directiva, @forelse la cual va a funcionar como un foreach pero nosotros podremos pasar a una opcion por defecto que en este caso va a ser el mensaje de usuarios que no hay usuarios registrados.

---user.blade.php
	<body>
		<h1>{{ $title }}</h1>

		<hr/>
		
		<ul>

			@forelse($users as $user)
					<li>{{ $user }} </li>

			@empty
				<p>No hay usuarios registrados</p>
			@endforelse
			
		</ul>

	</body>
	
	
---
Jugando con las pruebas y en el navegador:
	http://127.0.0.1:8000/usuarios
		o bien
	http://127.0.0.1:8000/usuarios?empty


Solamente estamo comprobando, si regresamos a la consola, las pruebas deberan pasar nuevamente.

Todo lo que va dentro de las llaves o los parentesis de las directivas que aceptan parantesis, es PHP valido. Podemos llamar a la funciona time y ver el resultado en la vista dentro del navegador

--
</ul>

	{{ time() }}

</body>

-- 

Incluso si llamamos a la fuincion tiem e imprimimos el resultado.

Por lo tanto en el caso de Blade no debemos gastar demasiado tiempo aprendiendo sintaxis nueva, por que simplemente es una manera elegante de envolver el PHP al que uno esta acostumbrado a trabajar en las vistas.

Con estos conocimientos podemos trabajar en EserController.php y podemo asignar y crear diferentes vistas para las otras acciones, debemos practicar.

Si se necesita utilizar datos dinamicos, podemos hacerlo empleando la funcion request encadenando el metodo has-

---Usercontroler.php

 if(request()->has('empty')){
            $users = [];
--
O poniendo los datos de la siguiente manera:_

---UserController.php

request('data');

if(request()->has('empty')){
            $users = [];
---   


Considerando que esto es temporal, puesto que se vera mas adelante como trabar con Basees de Datos con Laravel.




Ejercicios
==========

Ejercicio

En UserController asigna y crea vistas para las otras acciones y practica pasando datos a la vista.
Material relacionado


Referencias
==========

Documentación oficial del motor de plantillas Blade (en inglés)
	https://laravel.com/docs/5.5/blade
