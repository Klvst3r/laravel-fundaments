26. Modificar tablas ya existentes con las migraciones de Laravel

Notas
=====

En esta lección aprenderás cómo puedes modificar tablas ya existentes a través del sistema de migraciones de Laravel de dos formas: modificando una migración ya existente o creando una migración nueva. Para lograr esto utilizaremos varios comandos de Artisan como migrate:refresh, migrate:reset y migrate:rollback y por supuesto crearemos la nueva migración con el comando make:migration.



Practica
========

En la leccion anterior, vimos una breve introduccion al sistema de migraciones de Laravel aprendimos como configurar nuestra base de datos en el archivo de entorno .env y es en este archivo  que puedes configurar el nombre de la base de datos que el proyecto va a utilizar con el nombre de usuario y contraseña que necesitamospara obtener permisos a dicha base de datos. Aca tambien podemos cambiar: el host, el puerto e incluso el tipo de conexion que se va a utilizar, que para nuestro caso especifico sera MySQL.

    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=crudlaravel5_5
    DB_USERNAME=root
    DB_PASSWORD=desarrollo

La URL del proyecto se queda con localhost, ya que como estamos utilizando un entorno de desarrollo no habra complicaciones, pero; cuando las condiciones cambien a producción, es importante modificar la RL real del servidor de producción, asi como el nombre del proyecto:

    APP_NAME=CURDLaravel5_5
    ...
    APP_URL=http://localhost

Para entonces poder crear las tablas se ejecuto, las migraciones con el comando en la consola:
    > php artisan migrate

Comprobamos con PHPMyAdmin par comprobar que las tablas fueron creadas correctamente. Pero no aprendimos a crear nuevas tablas con migraciones modificadas a las existentes, asi que esto es lo que vamos a ver en esta sección.

Vamo a considerar que queremos crear perfiles diferentes de usuario y para ello se dara la posibilidad a cada usuario que agregue una profesión, de pronto al momento de registrrarse o cuando este actualizando su perfil de usuario.

Para ello entonces vamos a necesitar una nueva columna llamada "profesion", se podria agregar directamente en PHPMyAdmin, pero la idea es hacerlo con el sistema de migraciones, es decir, modificando o creando una nueva migración. Por ejemplo vamos a ver como podemos hacerlo modificando la migración ya existente para crear la tabla de usuarios. Yu entocnes se crea una nueva columna llama profesion:


--- /database/migrations/2014_10_12_000000_create_users_table.php

    ...
    public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->increments('id'); //Integer unsigned - Autoincrement
            $table->string('name'); //varchar
            $table->string('email')->unique(); //varchar - Unique
            $table->string('profesion', 100)->nullable(); // columna con 100 car y puede ser o no opcional de acuerdo a lo resgistrado.Es opcional que pueda o no tener profesion
            $table->string('password'); 
            $table->rememberToken();
            $table->timestamps();
        });
    }
    ...

    
---


La columna profesion va a ser una columna de caracteres de tipo varchar, unica, para ello se puede introducir un segundo argumento, queriendo que la cadena de texto tenga un maximo de 100 caracteres, y puedo encadenarlo con el metodo nullable para inicar que el valor de esta columna es opcional, es decir, que el usuario puede tener o no una profesion; 

    $table->string('profesion', 100)->nullable(); 

Guardamos y regresamos a la terminal; sin embargo luego de terminar esto y regresamos a la consola y reejecutamos el comando 

    > php artisan migrate

Detectaremos que nada pasa y si regresamos al navegador y recargamos la estructura de la tabla de usuarios, veremos que aun no se tiene la columan o campo "profesion",y esto es por que esta migración ya ha sido ejecutada previamiente, Laravel no la va a ejecutar nuevamente.

Pero podemos solucionar esto de varias formas por supuesto una seria elimiando toda la estructura de la base de datos, pero esto no es lo que se quiere hacer. Si no que vamos a regresar a la consola y vamos a ejecutar el comando
    > php artisan migrate:reset


Este comando va a devolver todas las migraciones que han sido ejecutadas, en orden inverso.

Es decir la ultima migración es la que se ejecutara primero, luego la anterior y asi sucesivamente hasta la primera migracion que se haya ejecutado.     

Laravel va a obtener esta información de la tabla "migrations", esta es la responsabiliad de esta tabla.

Si ahora recargamos la estructura de la BD, todas las tablas fueron eliminadas, si exploramos la tabla migrations. Ahora ya no hay ningun registro ni fila en esta tabla, lo que significa que podemos recrear las tablas y ejecutar el comando 

    > php artisan migrate


Si regresamios a la Bd, podemos ver que ya se tienen nuevamente las dos tablas y podemos explorar la estructura nuevamente a la tabla de usuaruos y veremos que ya se encuentra el campo "profesion". En PhPMyAdmin podemos ver el tipo de campo que se ha generado, va a ser una cadena de texto con un maximo de 100 caracteres, pero vamos a suponer que ahora queremos darle un maximo de 200 caracteres a este campo o de 50 caracteres. 

Para ello entonces vamos a modificar la migracion "CreateUserTable" de la migrcuion create_users_table nuevamente y ahora vamos a regresar a la consola. Pero en logar de ejecutar 
    > php artisan migrate:reset
    > php artisan migrate

En lugar de los comandos anteriores podemos ejecutar el comando:
    > php artisan migrate:refresh

Este comando primero va a ejecutar un "reset" de todas las migraciones, es decir se van a ejecutar todos los metodos down() de las migraciones que se han ejecutado hasta ahora, en este caso en orden unverso.

De esta manera primero se va a eliminar la table "password_resets". Notemos que en el metodo no se indica si se va a elimimarar la tabla si existe, luego se va a eliminar la tabla "users", y acontinuación y en orden ascendente va a recrear la tabal de "users" y luego va a crear la tabla "password_resets". Esto se va a lograr con solo camando, luego despues de hacer esto, podemos regresar la estructura de la tabla "users". Verificamos el cambio desde phpmyadmin.

Ahora los comandos 
    > php artisan migrate:refresh 
    o
    > php artisan migrate:reset

Suelen ser destructivos por que pueden eliminar incluso toda la estructura de la Bd, es decir todas las tablas de la BD, si por ejemplo agregamos un nuevo usuario en la tabla "users":
Ej
    INSERT INTO `users` (`id`, `name`, `email`, `profesion`, `password`, `remember_token`, `created_at`, `updated_at`) VALUES (NULL, 'Klvst3r', 'klvst3r@klvst3r.io', 'Developer', '123', NULL, NULL, NULL);


Ya con el contenido de la tabla "users" y regresamos en la consola:
    > php artistan migrate:refresh

en este caso si volvemos a examinar esta tabla.

Podemos ver qe ahora la tabla esta vacia, lo que quiere decir que este comando efectivamente va a eliminar nuestra tabla de usuarios pero no va a respaldar la información  de ninguna manera. Cuando nosotros estamos desarrollando un proyecto esto no suele tener ninguna importancia. Pero si ya tebnemos tiempo desarollando este proyecto y queremos agregar una columna ya existente a una tabla, sin necesidad de eliminar la tabla y recrearla nuevamente, podemos lograrlo de forma muy sincecilla agregando una nueva migración a nuesto proyecto.

Para ello vamos a regresar al editor 

de
---
 public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->increments('id'); //Integer unsigned - Autoincrement
            $table->string('name'); //varchar
            $table->string('email')->unique(); //varchar - Unique
            $table->string('profesion', 50)->nullable(); // columna con 100 car y puede ser o no opcional de acuerdo a lo resgistrado.Es opcional que pueda o no tener profesion
            $table->string('password'); 
            $table->rememberToken();
            $table->timestamps();
        });
    }

---

Vamos a eliminar el campo "profesion" y luego de regeso a la consola  ejecutamos.

    > php artisan migrate:refresh

Veolveremos a la estructura inicial de la tabla sin datos.


Ya no vamos a ver la columna "profesion" asi que ahora queremos agregar estra misma columna utilizando una nueva migración y para ello de regreso a la consola, vamos a ejecutar el comando:
    > php artisan make:migration

Con este comando como su nombre lo indica vamos a generar una nueva migración, y debo darle un nombre, en este caso quiero agregar la columna "profesion" a la tabla users 

    > php artisan make:migration add_profession_to_users

Notemos como el nombre de esta migración es descriptiva para lo que vamos a hacer 

De regreso al editor entonces vamos a modificar el nuevo archivo que ha sido generado, podemos notar que tiene el nombre de la migración que colocamos en la consola.

----add_profession_to_users
...

class AddProfessionToUsers extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        //
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        //
    }
---


Tiene una marca de tiempo con la fecha y hora actual. 

Se tienen los metodos up() y down(), y en este caso debemos completar el codigo, para ello vamos a utilizar el phasa Schema pero en este caso vamos a utilizar el metodo table() y no el metodo create(). Popr que nosotros no queremos crear una tabla simplemente queremos modificarla, y la tabla que queremos modificar es la tabla de usuarios y aca como segundo argumento vamos a tener una funcion anonima la cual va a recibir un objeto de la class Blueprint, en este caso es dentro de esta funcion anonima que nosotros vamos a alterar o modificarnuestra tabla y lo que se quiere es agregar una columna de tipo cadena de texto que se va a llamar "profession" con un maximo de 50 caracteres y puede ser null. Podemos ver al principio del archivo que este archivo generado contiene las sentencias use que importan las clases que estamos utilizando.

---add_profesion_to_users.php
...
     public function up()
    {
       Schema::table('users', function (Blueprint $table)){
        $table->string('profession', 50)->nulltable();
       }
    }
...
---

Por otro lado se tiene que completar el metodo down() para especificar la situacion inversa si en el metodo up() vamos a gregar una columna a la tabla de usuarios, en el metodo down() vamos a eliminarla. Esto se va a losgrar con el metodo dropColumn()

---add_profession_to_users.php
    public function down()
    {
        Schema::table('users', function (Blueprint $table)){
            $table->dropColumn('profession');
        }
    }
---

Estamos pasando el nombre de la tabla que se quiere eliminar.

Teniendo ya los metodos completados, regresamos a la consola y ejecutamos:
    > php artisan migrate

En este caso se va a ejecutar una sola migración la cual es la unica migración que no habia sido ejecutada.


=======
$ php artisan migrate
Migrating: 2022_06_04_230004_add_profession_to_users
Migrated:  2022_06_04_230004_add_profession_to_users




Es decir que ahora no necesitamos eliminar y recrear la tabla usuarios para agregar esta columna y podemos ver el resultado en el navegador.

Ahora tenemos la columna "profession", sin embargo se agrego justo al final de la tabla y no queremos esto. Lo que se pretendia es que estuviera despues de la columna "password". Podemos solucioonar este problema si regresamos al editor y en la migración encadenamos el metodo after() en la linea donde definimos la columan "profession" y ahi indicamos que queremos agregar despues del campo password

---add_profesion_to_users.php
...
     public function up()
    {
       Schema::table('users', function (Blueprint $table)){
        $table->string('profession', 50)->nulltable()->after('password');
       }
    }
...
---

si regresamos a la consola estaremos en el mismo dilema de antes, si ejecutamos 
    > php artisan migrate 

No va a pasar nada. Pero si hacemos ahora el  comando
    > php artisan migrate:refresh

Se van a eliminar todas las tablas y con ello todos los datos. afortunadamente Laravel nos tiene una solución con el comando llamada "roolback"    
    > php artisan migrate:rollback

Si ahora inspeccionamos en la base de datos el contenido de la tabla "migrations" podemos ver que Laravel ha ejecutado estas muigraciones en lotes, en el primer lote, ejecutamos la migración para crear la tabla de usuarios y la tabla de passwods_resets, en el segundo lote ejecutamos la migración para agregar la columna profession a la tabla de usuarios y eso esta definido en lotes diferentes por que fuimos ejecutando estas migraciones poco a poco, primero ejecutamos dos migraciones, luego ejectamos una tercera migración y la ejecutamos por lo tanto  Laravel la registro en lotes o grupos diferentes. 


+----+------------------------------------------------+-------+
| id | migration                                      | batch |
+----+------------------------------------------------+-------+
| 11 | 2022_06_01_172104_add_profession_to_users      |     2 |
| 10 | 2014_10_12_100000_create_password_resets_table |     1 |
|  9 | 2014_10_12_000000_create_users_table           |     1 |
+----+------------------------------------------------+-------+


Ahora si ejecutamos el comando rollback
    > php artisan migrate:rollback

Laravel va a regresar el ultimo lote de miigraciones que fueron ejecutadas.    

En este caso el lote dos donde se agrego la columna profesion a la tabla de usuarios en este caso se esta ejecutando el metodo down() donde nosotos entonces eliminamos la columna profesion, por lo que ahora si revisamos la estruictura de la tabla usuarios ya no tenemos la columna "profesion" y si revisamos el contenido de nuestra tabla "migrations" podemos ver que ya no tenemos el lote 2. Lo que se pretende establecer es que podemos regresar a la consola y reejcutar el comando 
    > php artisan migrate


De esta manera logramos cambiar el orden de la columna profession en la tabla usuarios sin tener que destruir dicha tabla. Es decir sin que laravel eliminase la tabal de usuarios y la crease nuevamente. en este punto restara respaldar los datos y volver a incorporarlos de acuerdo a lo ya resgistrado en las tablas correspondientes.


En este punto restara respaldar los datos y volver a incorporarlos de acuerdo a lo ya resgistrado en las tablas correspondientes.

Hacemos una exportación de datos y la incorporamos a la doucmentación de la presente guia.




Ejercicio
=========

Modificar una tabla

Para agregar una columna a una tabla, modificamos la migración ya existente. En nuestro caso añadimos un campo profession con un limite de 100 caracteres a la tabla users:

---
<?php
//...
Schema::create('users', function (Blueprint $table) {
    $table->increments('id');
    $table->string('name');
    $table->string('email')->unique();  
    $table->string('profession', 100)->nullable(); // Agregamos una nueva columna
    $table->string('password');
    $table->rememberToken();
    $table->timestamps();
});

Encadenando nullable() indicamos que la columna puede contener valores nulos, es decir que su valor es opcional.
Comando reset

El comando de Artisan migrate:reset va a hacer un retroceso (roll back) de las migraciones ejecutadas previamente. En nuestro ejemplo va a eliminar las tablas users y password_resets.

#
php artisan migrate:reset

Luego de ejecutar este comando, podemos ejecutar el comando php artisan migrate para volver a crear las tablas.
Modificar un campo ya existente

Para modificar un campo ya existente, por ejemplo el limite de caracteres del campo profession, agregamos el nuevo valor en la migración:
<?php
//...
Schema::create('users', function (Blueprint $table) {
    // ...
    $table->string('profession', 50)->nullable(); // Cambiamos el límite de 100 a 50
    // ...
});

Para que estos cambios tengan efecto debemos ejecutar el comando de Artisan migrate:refresh.
Comando migrate:refresh

El comando migrate:refresh primero va a ejecutar un reset de todas las migraciones (llamando al método down()) y luego volverá a ejecutar las migraciones (llamando al método up()):

#
php artisan migrate:refresh

Modificar migraciones

Al realizar una modificación en la migración original tenemos el problema de que los comandos reset y refresh eliminaran el contenido de las tablas en la base de datos. Para evitar esto podemos (utilizando el comando make:migration) crear una nueva migración y agregar desde ahí las modificaciones que necesitamos:

#
php artisan make:migration add_profession_to_users

Es una buena practica que el nombre de la migración sea descriptivo y haga referencia a lo que vamos a hacer. En este caso add_profession_to_users indica que queremos agregar el campo profession a la tabla users.

Dentro del método up() de la migración en lugar de usar el método create del facade Schema utilizaremos table y pasaremos como primer argumento el nombre de la tabla que queremos modificar:
<?php
//...
Schema::table('users', (Blueprint $table)) {
    $table->string('profession', 50)->nullable();
});

Dentro de la función indicamos el campo que queremos agregar.

En el método down() especificamos la acción inversa, en este caso eliminar la columna que agregamos en el método up():
<?php
//...
Schema::table('users', function (Blueprint $table) {
    $table->dropColumn('profession');
});

Con el método dropColumn eliminamos de la tabla la columna especificada como argumento.
Indicar la posición de una columna

Al modificar una migración utilizando Schema::table y agregar una columna, esta se va añadir al final de la tabla. Podemos lograr que la columna se cree en la posición que indiquemos utilizando el método after:
<?php
//...
Schema::table('users', function (Blueprint $table)) {
    $table->string('profession', 50)->nullable()->after('password');
});

En este caso indicamos que queremos agregar la columna profession después del campo password.
Comando rollback

Utilizando el camando de Artisan migrate:rollback Laravel regresará el último lote de migraciones ejecutado:


php artisan migrate:rollback
=======
    > php artisan migrate:rollback


Comentarios
=============

En caso de que quien trabaje en el proyecto ya sepa y tenga en claro el uso de sql, y crease toda la estructura de la bd con un script sql, esto afectaria el desempeño de la aplicacion laravel?, es indistinto desde donde se cree la bd?

    Si se esta claro en el uso de SQL y aún así se usa el sistema de migraciones tiene una razon y es porque es más conveniente que escribir SQL de forma manual, por los beneficios que se han explicado en las secciones del capitulo 3. Pero si se crean las tablas de forma manual y se hace de manera correcta (colocando todas las llaves primarias y foráneas, indexes, etc. de forma correcta) el desempeño va a ser el mismo. 
    Los problemas serán otros (compartir / replicar la estructura, recrear las tablas, ver el historial de cambios, regresar a una versión anterior, etc).