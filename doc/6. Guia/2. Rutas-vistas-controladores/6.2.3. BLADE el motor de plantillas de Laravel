6.2.3. BLADE, el motor de plantillas de Laravel


Archivos
-----

    Secciones:
        Vistas:
            resources/views/Backups_views

            resources/views/
                contactos.blade.php
                home.blade.php
                layout.blade.php
                saludo.blade.php
            
        Rutas:
            routes/web.php


Contexto
--------

BLADE es el motor de plantillas que viene con Laravel, permite escribir codigo HTML de forma Elegante, divertida.

Para utilizar Blade en Laravel, basta con agregar la extensión .blade dentro de la ruta:

    resources/views/

Para comenzar al archivo "saludo.php" -> saludo.blade.php

El funcionamiento sera el mismo ya que no obliga a autilizar la sintaxis. Permite utilizar PHP plano cuando se requiera.

Para hacer un echo de una variable o de otro codigo de PHp dentro de HTML

Ejemplo de PHP

    <h1>Saludos para <?php echo $nombre; ?></h1> 
	
Mismo ejemplo con Blade
    <h1>Saludos para {{ $nombre }}</h1> 


Esto no afecta el rendimiento, ya qye si vamos a la carpeta storage/framework/views podemos ver que la vista se compila y se guarda en un archivo aparte, este proceso de compilación sucede una sola vez y solamente se compila nuevamente si se detecta un nuevo cambio en la vista, es decir si no cambia el archivo saludo.blade.php, blade no volvera a ejecutarse y en su lugar tomara este archivo ya compilado.

En su lugar se utiliza el archivo con el siguiente codigo ya compilado 

    <h1>Saludos para <?php echo e($nombre); ?></h1> 

En la linea mostrada anteriormente que es la procesada por Blade que la variable esta encerrada en una funcion e(). Esta funcion es un helper que viene con Laravel detras de escena pasa la variable por la fucnion nativa de PHP llamada 
    htmlentities($nombre)

Para proteger a lo que se le conoce como 

    XSS Cross Site Scripting

O inyección de codigo malisioso, esto evita que personas malinitencionadas ejecuten scripts que causen comportamientos no deseados dentro de la aplicación, sin embargo hay ocaciones en que se da el permiso al usuario de ingresar estructuras html CSS o Js a traves de un formulario.

Ej.
 En web.php

    Route::get('saludos/{nombre?}', ['as' =>'saludos', function($nombre = "Invitado"){
        $html = "<h2>Contenido HTML</h2>";
        return view('saludo', compact('nombre', 'html'));
    }])->where('nombre',"[A-Za-z0-9]+");    


Pasamos contenido HTMl y se pasa a la vista com la funcion compact, esto es algo se ingreso por un usuario mediante un formulario.

Ahora queremos esta estructura como h1, como parte del html de la pagina, si se usan dobles llaves, el contenido es mostrado como una cadena de caracteres y no es lo que se quiere.

El contenido se pasa como parte de la pagina, los signos de admiración son para alertarnos de que codigo no esta siendo escapado, y que puede ser peligroso


<h1>Saludos para {{ $nombre }}</h1> 
	{!! $html !!}


Ahra vamos con otro ejemplo:
     Donde pasamos un archivo con funcion Js
        $script = "<script>alert('Problema XSS - Cross Site Scripting!')</script>";


En la vista

	<h1>Saludos para {{ $nombre }}</h1> 
	{!! $html !!}
	{{ $script }}


No hay ningun problema, pero si utilizamos los signos de admiración, el script es ejecutado, por ello es de vital cuidado que solo se debe utilizar la sintaxis con signos de adminiración si el contenido es seguro.

Loop con Blade
--------------

Suponiendo que tenemos un arrya de consolas:

    $consolas = [
        "Play Station 4", 
        "Xbox One",
        "Wii U"
    ];

En la vista 

    <ul>
		@foreach($consolas as $consola)
			<li>
				{{ $consola }}
			</li>
		@endforeach
	</ul>

Obtenemos el listado, y si el array esta vacio, simplemente no muestrra nada.

     $consolas = [];

Para estos casos podremos utilizar forelse

    <ul>
		@forelse($consolas as $consola)
			<li>
				{{ $consola }}
			</li>
		@empty
			<p>No hay consolas</p>
		@endforelse
	</ul>

    Igual funciona con los condicionales, solo si hay un elemento en el array

    $consolas = [
        "Play Station 4", 
       
    ];


En la plantillas
    @if(count($consolas) === 1)
		<p>Solo tienes una consola</p>
	@endif

Tambien se puede utilizar elseif y else

    @if(count($consolas) === 1)
		<p>Solo tienes una consola</p>
	@elseif(count($consolas) > 1)
		<p>Tienes varias consolas</p>
	@endif

Si ninguna de las condiciones anteriores se cumple, quiere decir que el array esta vacio.

Tendriamos:
    @if(count($consolas) === 1)
		<p>Solo tienes una consola</p>
	@elseif(count($consolas) > 1)
		<p>Tienes varias consolas</p>
	@else(count($consolas) > 1)
		<p>No tienes ninguna consola</p>
	@endif
Funconara si el array esta vacio.

Atendiendo el proble de duplicidad de codigo anteriormente descrito para el meno de HTML, se solucionara utilizando plantillas de blade, 

Vamos a crear un archivo de blade, que sera la plantilla y contendra todo el html que se repite en las paginas, contendra la navegación.

    layout.blade.php

Se crea un espacio para mostrar el contenido, individual de cada pagina.

    layout.blade.php


Para el contenido individual de cada pagina sera con 

    @yield('[Nombre de la seccion a incluir en el contenido]') 

Para el origen de los datos escribimos en nuestro caso: saludo.layout.php

    @extends('layout')

Lo que hara es extender una clase al nombre de la plantilla a la que queremos enviar la información o extender. Similar a cuando extendemos una clase que heredamos todos los metodos de la clase padre en este caso heredamos todo el html de la plantilla layout.    

Ahora solo queda definir una sección para establecer el contenido unico de esta vista, se hace con la palabra section con el parametro el nombre del yield, en este caso contenido.
    @section('contenido ')
        <h1>Saludos a {{ $nombre }}</h1>
    @stop

Lo mismo se pude hacer con la vista contactos

@extends('layout')

@section('contenido')
		<h1>Contactos</h1>
@stop


En las rutas para devolver la vista en lugar del string difinido 

Route::get('contactame', ['as' => 'contactos', function(){
    return view('contactos');
}]);

Ahora podremos verificar que todos los links funcionan 

Ahora solo resta la vista home

@extends('layout')

@section('contenido')
	<h1>Home</h1>
@stop

De ahora en adelante, 

Para la vista de saludos.

@section('contenido')
 	<h1>Saludos a {{ $nombre }}</h1>
 @stop

 Ahora solo es necesario modificar la vista layout y esto se aplicara en cada una de las plantillas de Blade.

 Por ejemplo en la navegación vamos a cambiar de contacto a contactos

 El cambio se ve reflejado en todas las paginas.

 Volviendo al archivo routes

 Y se puede observar que se han sobrepasado las 20 lineas de codigo y apenas se ha escrito tres rutas. Cabe recalcar que si tenemos pensado escalar nuestra aplicación y hacerla mas grande, tener el codigo en el mismo archivo puede ser una bomba de tiempo.

 Por esto vamos a limpier en la siguiente sección el archivo utilizando controllers.

Referencia sobre le Motor de plantillas de Blade
    https://desarrolloweb.com/articulos/sintaxis-laravel-blade

    https://laravel.com/docs/9.x/blade

    https://styde.net/introduccion-a-blade-el-motor-de-plantillas-de-laravel-9/

    https://es.stackoverflow.com/questions/85889/como-se-interpreta-el-forelse-en-laravel-y-para-que-sirve

    

 