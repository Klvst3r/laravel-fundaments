6.3.2. Como mostrar HTML con las vistas

Las vistas como su nombre lo indica son la parte visual de nuestra aplicación, es decir es la que ve el usuario final.y contienen el HTML de nuestra Aplicacion se ecnuantran en

	/resources/views

Laravel trae por defecto una vista llamada
	welcome.blade.php

Vamos a eliminarla y vamos crear una vista llamada home.php 

Generando la estructura basica del codumento	
	<!DOCTYPE html>
		<html>
		<head>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width, initial-scale=1">
			<title>Home</title>
		</head>
		<body>
			<h1>Home</h1>
		</body>
		</html>

Ahora vamos al archivo de rutas 

Route::get('/', function () {
    return view('welcome');
});

La funcion retornada view retorna el nombre de la vista y omo parametro el nobre del archivo en este caso home, omitiendo la extensión


Existen varias formas para retornar vistas, la forma mas sencillas es mediante la funcion view, que recibe como parametro el nombre de la lista.

		Route::get('/', function () {
		    return view('home');
		});



Laravel provee de funciones muy utiles, como esta, pero no quiere decir que Laravel este hecho de funciones globales.

si revisamos esta funcion, vemos que crea una nueva instancia de la clase ViewFactory

Para dar seguimiento a la ruta de cada uno de las definiciones de las funciones utilizadas sera necesario 

Existe un archivo de referencia para poder configurar nuestro editor Sublime Text que es el que utilizamos para el presente proyecto.


Hacer "Method changing" es encadenar metodos, de la siguiente forma:

	$class->method1()->method2().

Laravel es un framework muy robusto aunque parezca muy simple.

Volviendo al ejemplo, no es necesario poder la ruta del archivo. El directorio base de lasvistas es:
	resources /view/home.php
Tampoco es necesario incluir la extensión del archivo.

Probamos en el navegador y debe cargar la vista home.

	http://laravel-fundaments.io/

Muchas veces necesitamos pasar datos a las vistas. 

Las vistas
---------

Las vistas como su nombre lo indica son la parte visual de cnuestra aplicación, es decir lo que ve el usuario final, y contiene el HTMl de nuestra apicación, se encuentran en:

	resources/views.

Laravel tiene una vista por defecto llamada
	welcome.blade.php

Se elimina para crear una vista home.php, con la estructura basica de un documento html, agregando el titulo HOMe.

En el archivo routes vamos a modificar la ruta.

elimiando los links.

Rotornar vistas
--------------
Existen varias ormas de retornar vistas, la forma mas sencilla es:

	view que recibe por parametro, el nombre de la vista,

		home

		// 6.2.2
		//------
		Route::get('/', function () {
			return view('home');
		});


al pasar un parametro automaticamente nos llama al metodo make al metodo que implemkenta el factory.

Volviendo al ejemplio no es necesario utilizar el nombre completo y la extensión.

Cargando la vista home.

Muchas veces necesitamos pasar datos a las vistas. Pasamos un parametro por URL.

Creamos una vista llamada saludo.php

Con la estructura basic del html.

En la ruta creamos la vista

	

Route::get('saludos/{nombre?}', function($nombre = "Invitado"){
	return view('saludo', ['nombre' => $nombre]);
})->where('nombre',"[A-Za-z]+");		

en la vista saludo tya tenemos acceso a la variable por lo que se va a mostrardentor de un H1

 <!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Saludo</title>
</head>
<body>

	<h1>Saludos para <?php echo $nombre; ?></h1> 
</body>
</html>
 

 ahora podemos ir al a URL
	http://laravel-fundaments.io/saludos/klvstr

con esto pasamos la URL a la vista,

Existen algunas formas de pasar variables a las vistas, 


	Route::get('saludos/{nombre?}', function($nombre = "Invitado"){
		return view('saludo')->with(['nombre' => $nombre]);
	})->where('nombre',"[A-Za-z]+");    

Actualziamos y veremos el mismo resultado.	


Funcion "compaq"
---------------- 
Otra forma de hacerlo y es la que se utilizara de ahora en adelante es utilzando la funcion compac, lo que hace es devolver un array asociativo con el nombre que se le pase como llave y el valor de una variable existente del mismo nombre. Es decir


---
	Route::get('saludos/{nombre?}', function($nombre = "Invitado"){
		//siempre y cuando la variable nombre exista
		return view('saludo', compact('nombre'));//Devolvera un array con la llave nombre y el valor nombre 
	})->where('nombre',"[A-Za-z]+");    
---

Recultando lo mismo solo que ahora el codigo se ve mucho mas limpio.

No hay una forma correcta o incorrecta, lo que debemos de procurar es escoger una sola forma y utilizarla en todo el proyecto

Ahora vamos a la ruta de contactos.

Se crea la vista de contactos
	
	El listado completo esta en la ultima sección de "web.php"

	//6.2.2. rutas con nombre

	 En home hacemos referencia a los nombres de las rutas en "home.php"

	 Cambiando:

	 ---
		<a href="/">Inicio</a>
		<a href="saludos">Saludos</a>	
		<a href="contactos">Contactos</a>
	 ---

por
	---
		<a href="<?php echo route('home') ?>">Inicio</a>
		<a href="<?php echo route('saludos','Klvst3r') ?>">Saludos</a>
		<a href="<?php echo route('contactos') ?>">Contactos</a>

	---

Lo interesante en la ruta saludos es que recibe un parametro opcional, para poder enviar un parametro con la funcion route, simplemente se agrega como segundo parametro 
En la URL

http://laravel-fundaments.io/

Y para tener la navegación en todas las vistas, debemos copiarlas del home, Pero esto presentara un problema de duplicidad de codigo, y eso que es un ejemplo muy simple.

Tendriamos que copiar todo el contenido para cada vista que se crea.

Laravel tiene un poderoso motor de plantillas, llamado Blade.

Para evitar esto.
