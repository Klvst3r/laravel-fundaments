6.3.1. Validar Formularios

Archivos
-----

    Secciones:
        Vistas-Plantillas:
            layout.blade.php
            contactos.blade.php
            
            
        Rutas:
            routes/
                web.php
            
        Controladores
            app/Http/Controllers/
                PagesController.php
                Controller.php

        Middleware
            app/Http/Middleware/
                VerifyCsrfToken.php

        Trails
            Illuminate\Fundation\Validation\ValidatesRequests

        traducciones    
            lang/en
                validation.php



Contenido
----------
En la sección anterio se reviso como se puede revisar y accesar a las peticiones HTTP, realizadas por el usuario a traves del navegador, en esta seccion se vera como validar estas peticiones, para que concuerden con la logica de la aplicación.

En Pagecontroller, podemos ver que el controlador se extiende  a un controlador base ubicado en:

    App\Http\controllers\Controller.php

Este a su vez utiliza un trail llamado  ValidatesRequests, que viene con Laravel y nos provee de varios metodos utiles para la validación.

Regresando a PagesController, el comidog final retornara todos los campos.

Accediendo al metodo validate del trail validate ValidatesRequests

El primer parametro, es el reuqest y el segundo un array con las reglas de validación.

---
    $this->validate($request,[
            'nombre' => 'required' //campo obligatorio
        ]);
---

Si esta regla no se cumple, Laravel automaticamente regresara al formulario para que el usuario corriga los errores. En el formulario al enviar un campo vacio nos regresara inmediatamente al formulario de captura, pues la validación se esta efectuando correctamente.

Si se envian datos la validación pasa,

Agregando otra regla

Validando el campo email    
    'email'     =>  'email'  //vaidacion de tipo email

La validación es por parte de HTML5, lo caul es muy bueno ya que la validación es por parte del cleinte y si por alguna razon Js esta deshabilitado, tenemos la validación del lado del servidor.

Mientras mas capas de validación se tengan es mucho mejor.


Hasta este punto no muestra ningun comentario sobre que esta haciendo mal el usuario, para el desarollador podria tener idera, pero el usuario final no sabria que esta haciendo mal.

Para esto existe un objeto que esta disponible en todas las vistas llamado errors, que contiene los errores de validación 

Vista Contactos.blade.php
---
    <p><label for="nombre">Nombre
				<input type="text" name="nombre">
				{{ $errors->first('nombre') }}
			</label></p>
---

Con esto ahora podremos ver el error. Por ahora esta en ingles. Procedemos con el campo email.

    {{ $errors->first('email') }}

Pero esto no mostrara el error del email, esto es por que no se ha cometido ningun error, ya que cuando se definen las reglas de validación en el archivo PagesController. solo estamos verifiacndo que se tenga el formato de un email, no le estamos indicando que se a obligatorio

Entonces si queremos añadir mas de una regla por campo podremos separarlas por una linea vertical en la validación en el controlador.

    ALT + 124    |

Otra alternativa es pasar un array, cualuiera de las formas funciona

    'email'     =>  'required|email'  //vaidacion de tipo email

O tambien por medio de un array
    'email'     =>  ['required', 'email']

ahora tenemos dos reglas para el campo email.

aunque la validación paso por el nombre, al regresar debo volver a requisitar todos los datos previamente llenados.

Esto no es optimo, por eso proporciona una funcion llamada  "old" que recibe por parametro el nombre del caomp y devuelve el valor ingresado  anteriormente, esta funcion se agrega a la funcion value

Contacto.blade.php
---
    <input type="text" name="nombre" value="{{ old('nombre') }}">
---

Ahora el valor se mantiene.

Tercera regla de validación de formularios

Para el Text area.

en este caso indicamos que el mensaje sea obligatorio, y que tenga un minimo de cinco letras,

---
    'mensaje'   =>  'required|min:5' //Obligatorio con un minimo de cinco letras
---

Si quwremos ver todas las opciones de reglas de validación disponibles en Laravel, podemos acudir a:

    https://laravel.com/docs/5.2/validation
en especifico:
    https://laravel.com/docs/5.2/validation#available-validation-rules    

Agregamos los mensajes deerror al textarea

---
    <p><label for="mensaje">Mensaje
				<textarea name="mensaje"></textarea>
				{{ $errors->first('mensaje') }}
			</label></p>
---

Verificamos, agregando el antiguo valor al email y al textarea

---
    <input type="email" name="email" value="{{ old('email') }}">
    ...
    <textarea name="mensaje">{{ old('mensaje') }}</textarea>
---

Para darle color en el archivo de plantillas.

en el layout.blade.php
aplicables en contactos.blade.php

Como un segundo argumento, pasando la estructura HTML5, con un span Laravel buscara la cadena :message y reempazara por el error

---
    {{ $errors->first('nombre','<span class=error>:message</span>') }}
---

Pegandose en los demas campos, al actualizar en el nevgador mostrara la estructura html, esto se soluciona  

Para imprimir HTML como estructura
con {!! ... !!} cambiando las siguientes lineas:


---
{!! $errors->first('nombre','<span class=error>:message</span>') !!}
...
{!! $errors->first('email','<span class=error>:message</span>') !!}
...
{!! $errors->first('mensaje','<span class=error>:message</span>') !!}
---



Cambio de mensajes de error de idioma
-------------------



Si vamos a la carpeta
    lang/en

Aca se guardan las traducciones en ingles  de validación , paginación entre otros.

Revisando el archivo
    validation.php

Buscando la palabra required. Encontraremos el mensaje cuando un campo es obligatorio, la cadena 'atribute' es reemplazada por el nombre del campo. en este caso nombre, Podriamos editar los mensajes directamente desde aqui, pero existe una mejor forma de hacerlo.

Dupilcamos la carpeta en y la cambiamos a es en conjunto de todos sus archivos.

Abriendo el archivo podriamos traducir cada uno de los mensajes, abrimos el archivo
    lang/es/validation.php

Volvemos la palabra required con el mensaje que debemos modificar.

---
    'required' => 'El campo :attribute es obligatorio.',
---

Esto no es suficiente por que ahora debemos decirle a Laravel, que nuestra aplicación esta en español, para ello en la carpeta

confirg/app.php

Buscar la linea que contiene:
    'locale' => 'en',

    'locale' => 'es',


Con esto sera suficiente. Ahora cambiamos el mensaje de validación del mensaje 

De esta forma se podria ir traduciendo manualmente todos los errores, pero existe un repositorio que se puede utilizar.

Google
    laravel validation languages

En el primer resultado de github, eonctremos varios repositorio con las traducciones necesarias, aca hay que buscar la carpeta es, con las traducciones en español.

    https://github.com/Laravel-Lang/lang

    https://github.com/Laravel-Lang/lang/blob/main/locales/es/json.json

Seria descargar cada uno de los archivos contenidos, igual que en el archivo
    lang/locales/es/validation.php

Se abrira el archivo, y hacemos click en "Ramw" Seleccionamos todo y copiamos el contenido copiamos en el archivo locale
    validation.php

Para la Version 9 la situaicón cambia.

Pero hay una forma de hacer multiidioma nuestro proyecto.

Para este proceso se crea un helper de configuración 


Para poder Cargar el FormRequest al proyecto

Ejecutamos
    Para limpiar el cache
        composer clear-cache  

    Para Cargar el FormRequest
        composer dump-autoload


Finalmente el namespace y uso de FormRequest 

Para el Controlador: (PagesController.php)
    ---
    / 6.3.2 Ok - Funcionales para validación
    namespace App\Http\Controllers;
    use App\Http\Requests\CreateMessageRequest;
    use Illuminate\Http\Request;
    ---

Para el FormRequest
    ---
    namespace App\Http\Requests;
    use Illuminate\Foundation\Http\FormRequest;
    ---
    




Referencia:

https://desarrolloweb.com/articulos/localizacion-laravel

https://dev.to/lucasgio/mejora-tus-validaciones-en-laravel-con-form-request-23pd

https://styde.net/como-trabajar-con-form-requests-en-laravel/

https://laravel.io/forum/01-08-2017-how-to-solve-class-apphttprequestsupdateuserrequest-does-not-exist-laravel-53

https://litvinjuan.medium.com/how-to-fix-target-class-does-not-exist-in-laravel-8-f9e28b79f8b4

https://laracasts.com/discuss/channels/general-discussion/class-apphttpcontrollersrequest-does-not-exist


Referencias Oficiales:

https://laravel.com/docs/5.2/validation#available-validation-rules

https://laravel.com/docs/9.x/validation#creating-form-requests

