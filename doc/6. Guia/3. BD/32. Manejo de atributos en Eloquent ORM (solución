32. Manejo de atributos en Eloquent ORM (solución a MassAssignmentException)

Notas:
======

En esta sección vamos a aprender un poco más sobre cómo trabajar con los atributos de Eloquent, es decir cómo podemos leer y asignar atributos a un modelo. La asignación de atributos la haremos utilizando asignación masiva e individual, y veremos de qué se trata el error «MassAssignmentException», cómo solucionarlo y cual es la protección que nos ofrece Laravel para evitar la inyección de atributos no deseados cuando cargamos datos provenientes de la petición de un usuario (por ejemplo a través de un formulario o API). Además te enseñaré cómo puedes convertir atributos de un tipo a otro mediante la propiedad «$casts» de Eloquent. Todos estos conceptos le acercarán más a lo que necesitas saber para comenzar a crear módulos CRUD con este genial framework.





Leer y asignar atributos
------------------------

Cuando trabajamos con Eloquent, todos los atributos de un modelo (o columnas de un registro) son tratados como si de propiedades públicas de la clase se tratasen. Por ejemplo si quieres obtener el nombre de un usuario almacenado en la variable «$user», puedes escribir: «$user->name; // obtiene el nombre del usuario».

Para re-asignar otro nombre puedes escribir «$user->name = 'Klvst3r';»

Estos cambios no serán guardados automáticamente en la tabla de usuarios en la base de datos, sino que necesitas ejecutar el método «save» para hacer esto:

--
	$user->save(); //inserta o actualiza el usuario en la base de datos
---


Eloquent es lo suficientemente inteligente para saber si debe ejecutar un «INSERT» o un «UPDATE» dependiendo si el usuario existe o no, respectivamente.

###
	La propiedad exists de Eloquent, nos permite averiguar si un modelo existe o no, ejemplo: «$user->exists» //devuelve «TRUE» si el usuario ya existe en la base de datos, «FALSE» de lo contrario.
###

-----

Se puede aprender más sobre cómo trabajar y utilizar métodos y propiedades mágicas con PHP revisando el tema de:

Metodos magicos __get __set __isset y __unset con PHP, ya que PHP es un lenguaje muy dinámico y ofrece a los desarrolladores la posibilidad de declarar cualquier lógica para acceder a propiedades o llamar a métodos dentro de una clase, aunque estos no estén definidos previamente. Esto es lo que se conoce como métodos mágicos y algunos componentes de PHP como por ejemplo el ORM Eloquent de Laravel, hacen uso de esta característica para mostrarnos una API más dinámica y fácil de usar, y por supuesto este tema lo veremos en este documento de referencia.

-------



Evitar fallos de seguridad por asignación masiva de datos
---------------------------------------------------------

La excepción «MassAssignmentException» es una forma en la que el ORM nos protege. Una vulnerabilidad de asignación masiva ocurre cuando un usuario envía un parametro inesperado mediante una solicitud y dicho parametro realiza un cambio en la base de datos que no esperabas. Por ejemplo, un usuario podría, utilizando Chrome Developer Tools o herramientas similares, agregar un campo oculto llamado «is_admin» con el valor de «1» y enviar la solicitud de registro de esta manera. Si no tienes cuidado con esto entonces cualquier usuario podría convertirse en administrador de tu aplicación, con consecuencias nefastas para tu sistema.

Para evitar esto, dentro del modelo agregamos la propiedad «$fillable» y asignamos como valor un array con las columnas que queremos permitir que puedan ser cargadas de forma masiva:

---
	class User extends Model
	{
	    protected $fillable = ['name', 'password', 'email'];
	}
---

También tenemos disponible la propiedad «$guarded». Al igual que «$fillable», esta propiedad tendrá como valor un array, pero en este caso las columnas que indicamos son las que "no" queremos que puedan ser cargadas de forma masiva:

---
	class User extends Model
	{
	    protected $guarded = ['is_admin'];
	}
---


Asignar un campo no fillable
----------------------------

Para asignar un valor a un campo que no está dentro de «$fillable», podemos asignar una nueva instancia de un modelo en una variable y luego asignar el campo de forma manual:
---
	$user = new User(['name' => 'Duilio', 'password' => bcrypt('123')]);
	$user->is_admin = true;
	$user->save();
---

Nota que «new User($datos)» solo crea un nuevo modelo sin persistirlo en la base de datos VS «User::create($datos)» que crea un nuevo modelo y lo inserta en la base de datos en un solo paso.



Convertir atributos
-------------------

La propiedad «$casts» nos permite convertir atributos a diferentes tipos de datos dentro de un modelo. «$casts» recibe como valor un array donde la llave es el nombre del atributo que será convertido y el valor el tipo al que lo queremos convertir:

---
	protected $casts = [
	    'is_admin' => 'boolean'
	];
---


En este caso convertimos la propiedad «is_admin» a boolean.



Material relacionado
--------------------
        
    \referencias\32.1. Asignación masiva (documentación de Laravel)




Practica:
=========

Antes e continuar con esta sección, hay un error que me gustaria mostrar, pasamos a la consola, si ejecutramos:
	> php artisan tinker

De la siguiente manera como se han creado unos usuarios.

	$ php artisan tinker
	Psy Shell v0.9.12 (PHP 7.3.10 — cli) by Justin Hileman
	>>> Profession::create(['title' => 'Profesor']);
	Illuminate/Database/Eloquent/MassAssignmentException with message 'title'


Se va a recibir un error, de asignación pasiva, como se puede leer en el mensaje de error.

Esta es en realidad una manera en el que el ORM de Eloquent nos esta protegiendo, puesto que estos datos que nosotros estamos pasando aca en el metodo "create"
	>>> Profession::create(['title' => 'Profesor']);

Pueden proveenir o van a porvenir por lo general de un usuario, por ejemplo pueden ser los datos que vamos a recibir de una petición HTTP, estos datos los podemos obtenerlos al utilizar por ejemplo el Phasa "Request".

	>>>$data = Request::all();

Sin embargo esto lo vamos a ver más adelante, por ahora vamos a imaginar que estos son datos dinamicos que provienen del usuario. Entonces el problema es que nuestro formulario nosotros podemos tener un campo titulo, pero nada le va a impedir al usuario modificar o alterar la peticion HTTP para enviar cualquier otro campo, por ejemplo, el campo ID.

Ej.
	>>> $data = ['title' => 'Profesor', 'id' => 10]; 

Si nosotros ejecutamos:

	$ php artisan tinker
	Psy Shell v0.9.12 (PHP 7.3.10 — cli) by Justin Hileman
	>>> $data = ['title' => 'Profesor', 'id' => 10];
	=> [
	     "title" => "Profesor",
	     "id" => 10,
	   ]


Si nosotros	obtenemos todos los datos provenientes de la petición de usuario y los asignamos de la siguiente manera:

	>>> Profession::create($data);
	Illuminate/Database/Eloquent/MassAssignmentException with message 'title'


Nos exponemos a que el usuario pueda cambiar cualquier campo dentro de nuestro registro, y es por esto que Laravel intenta protegernos, con este error o asignación masiva. 

	Illuminate/Database/Eloquent/MassAssignmentException with message 'title'

Solucionar este probelma es en realidad muy sencillo solamente debemos ir al modelo en cuestion. En este caso al modelo de Profesiones


---\app\Models\Profession.php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Profession extends Model
{
    //

    protected $fillable = ['title']; 
}

---

Y entonces agregar la propiedad "fillable" cuyo valor va a ser un array, con las propiedades o atributos que nosotros queremos permitir que sean cargados de forma masiva, es decir de una array asociativo con el metodo Create en tre otros metodos. Si hacemos esto y regresamos a la consola nuevamente a la consola y volvemos a ejecutar:

	>>> Profession::create($data);

Pasando este array de datos:

En este caso:

	>>> Profession::create($data);
	[!] Aliasing 'Profession' to 'App\Models\Profession' for this Tinker session.
	PHP Notice:  Undefined variable: data in C:/AppServ/www/dev/CRUDLaravel5.5eval()'d code on line 1
	>>>

En este caso se tine nuevamente un error por que el aray no existe pero se va a declarar y a ejecutar nuevamente.

Para ello en consola:

	>>> $data = ['title' => 'Profesor', 'id' => 10];
	=> [
	     "title" => "Profesor",
	     "id" => 10,
	   ]
	>>>

Y ahora si se ejecuta el metodo create:

Y ahora podemos ver la salida correspondiente:


	>>> Profession::create($data);
	=> App\Profession {#741
		title: "Profesor",
		updated_at: "2022-07-13 02:51:11",
		created_at: "2022-07-13 02:51:11",
		id: 4,
	}
	>>>


Revusando la Base de datos



Se agrego una profesion exitosamente, puesto que no se esta permitiendo que el ID se cargue masivamente y nos estaremos preguntando por que cuando nosotros creamos un usuario en la clase anterior, utilizando el metodo "create" no obtuvimos ningun error.

La respuesta en este caso esta dentro del modelo de "usuarios" si noosotros lo inspeccionamos en:


---\app\Models\User.php
...

  protected $fillable = [
        'name', 'email', 'password',
    ];

...    





Podemos ver que este modelo que ya venia inlcuido en nuestro proyecto, no se agrego sino que ya viene incluido en el proyectro base, ya trae la propiedad "fillable" definida dentro del modelo "User" y aca tenemos los siguientes campos:

Nombre, Email y Password

y de nuevo esto es extremadamente util, por que vamos siponer que nuestra tablade usuarios nosotros tenemos un campo de tipo boolean  para saber si un usuario es adminisrador o no.

---datablase\migrations\2014_10_12_100000_create_users_table.php

	public function up()
	    {
	        Schema::create('users', function (Blueprint $table) {
	            $table->increments('id'); //Integer unsigned - Autoincrement

	            $table->string('name'); //varchar
	            $table->string('email')->unique(); //varchar - Unique
	            $table->string('password'); 
	            $table->rememberToken();
	            $table->timestamps();
	        });
	    }
---


Vamos a colocar si valor por defecto en falso:


---

   public function up()
    {
        Schema::create('users', function (Blueprint $table) {
            $table->increments('id'); //Integer unsigned - Autoincrement

            $table->string('name'); //varchar
            $table->string('email')->unique(); //varchar - Unique
            $table->string('password'); 
            $table->boolean('is_admin')->default(false);
            $table->rememberToken();
            $table->timestamps();
        });
    }

---

Por que no queremos que los nuevos usuarios que se registren en nuestra aplicación sean administradores de buenas a primeras. No queremos esto asi que regresamos a la consola y saliendo de tinker.
	>>>Exit;


Reejecutamos las migraciones:

	> php artisan migrate

volvemos a entrar a tinker y creamos u nuevo usuario.

	> php artisan tinker

Que pasa si nosotros intentamos pasar las propiedades "is_admin" como verdadero, de pronto el usuario no conoce los campos que estan disponibles en la tabla de usuarios, asi que, el usuario intenta hacer varias pruebas.

	>>>User::create(['name' => 'un usuario', 'email' => 'un@usuario.com', 'password' => bcrypt('123'), 'is_admin' => true, 'admin' => 'true', 'administrador' => true, 'role' => 'admin']);

	=> App\User {#4124
     name: "un usuario",
     email: "un@usuario.com",
     updated_at: "2022-08-08 02:50:34",
     created_at: "2022-08-08 02:50:34",
     id: 2,
	   }
	>>>


En la Base de datos tenemos;

mysql> select * from professions;
+----+---------------------+---------------------+---------------------+
| id | title               | created_at          | updated_at          |
+----+---------------------+---------------------+---------------------+
|  1 | Back-end developer  | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |
|  2 | Front-end developer | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |
|  3 | Web Designer        | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |
|  4 | Profesor            | 2022-08-08 02:48:29 | 2022-08-08 02:48:29 |
+----+---------------------+---------------------+---------------------+


Todo ello va a ser ignorado por Laravel, puesto que nosotros nuevamente estamos definidiendo la propiedad "fillable" en el Modelo de Usuarios

---User
  protected $fillable = [
        'name', 'email', 'password',
    ];
---

Si hacemos la consulta desde tnker quedaria asi;

	>>>User::all();
	=> Illuminate\Database\Eloquent\Collection {#3874
     all: [
       App\User {#4121
         id: 1,
         name: "Klvst3r",
         email: "klvst3r@email.com",
         is_admin: 0,
         created_at: "2022-08-08 02:46:52",
         updated_at: "2022-08-08 02:46:52",
         profession_id: 1,
       },
       App\User {#4122
         id: 2,
         name: "un usuario",
         email: "un@usuario.com",
         is_admin: 0,
         created_at: "2022-08-08 02:50:34",
         updated_at: "2022-08-08 02:50:34",
         profession_id: null,
       },
     ],
   }



No podemos dar cuenta que no es un administrador, aqui el valor del atributo "is_admin" va a aprecer 0 por que Laravel va a crear esta columna de tipo "tinyint" en vez de boolean, pero se puede coprregir esto rapidamente en nuestro modelo si utilizamos la propiedad "cases".

La cual puedo declarar aca como una propiedad de tipo protected y luego enotnces vamos a asignar un array asociativo donde las llaves van a ser los nombres de los campos y aca los valores van  ser entonces el tipo de campo o el tipo de valor que quiero que Laravel convierta en este caso que convietra el atributo "is_admin" de entero a booleano de la siguiente manera.

 
Para ello.

---app/User.php

 protected $casts = [
        'is_admin' => 'boolean' 
    ];

---


Si hacemos esto y reiniciamos tinker 

 > php artisan tinker

 >>> User::all();
 => Illuminate\Database\Eloquent\Collection {#3874
     all: [
       App\User {#4121
         id: 1,
         name: "Klvst3r",
         email: "klvst3r@email.com",
         is_admin: 0,
         created_at: "2022-08-08 02:46:52",
         updated_at: "2022-08-08 02:46:52",
         profession_id: 1,
       },
       App\User {#4122
         id: 2,
         name: "un usuario",
         email: "un@usuario.com",
         is_admin: 0,
         created_at: "2022-08-08 02:50:34",
         updated_at: "2022-08-08 02:50:34",
         profession_id: null,
       },
     ],
   }
>>>


Aca se puede ver que todavia el atributo contiene el valos de cero. Si yo obtengo todos los usuarios de la siguiente manera;

>>> $users = User::all();

Y se almacenan en la variable $users, y luego obtengo el primer usuario de la siguiente forma para interactura con los atributos



>>> $user = $users->first();
=> App\User {#4131
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-08 02:46:52",
     updated_at: "2022-08-08 02:46:52",
     profession_id: 1,
   }


Y ahora interactuo con los atributos de este usuario.

De la siguiente forma:

>>> $user->is_admin;
=> 0
>>>


Podemos ver que el valor de este atributo es falso, y esto no se ha visto, pero podemos acceder a todos los atributos de nuestro modelo como si se tratasen de unas propiedades definidas dentro del modelo de usuarios, pero de nuevo Laravel aca va a utilizar propiedades magicas por lo cual no se van a ver definidas estas propiedades en el modelo en cuestion, lo cual no slleva al siguiente punto.

>>> $user->name;
=> "Klvst3r"

Que sucede si yo ahora quiero crear un usuario administrador, desde la consola utilizando tinker. en este caso yo puedo crear un ususario de este manera y pasar algunas propiedades, com por ejemplo, el nombre, el correo electronico, la contraseña, la cual se que puedo asignar de forma masiva y por cierto aca no podemosver la constraseña por que si vamos al modelo User podemos ver que este atributo esta definido como oculto o "hiden". 


>>> $user = new User(['name' => 'patron', 'email' => 'patroncito@shulo.com', 'password' => bcrypt('123')]);
=> App\User {#4134
     name: "patron",
     email: "patroncito@shulo.com",


Como podemos ver de la siguiente manera.


--- app/User.php
...
  protected $hidden = [
        'password', 'remember_token',
    ];
 ...
---

Este es otro de los features de Eloquent que es muy util sobre todo para el desarrollo de API's. 

De regreso a tinker yo puedo asignar el atributo "Admion" de la siguiente manera, nostese que aca no se esta asignando. de forma masiva, es decir de un array asociativo.

	>>> $user->is_admin = true;

Si no de forma individual.

Por supuesto cualquier programador podria hacer lo siguiente.

	>>> $user->is_admin = $request->get('is_admin'); [Esta linea no es viable de ejecutarse solo es de muestra para el ejerciciom no ejecutar]

Pero entonces es muy obvio darse cuenta que aqui hay algo mal, por que uno no quiere que un usuario desde una peticion pueda asignarse un rol de administrador. De pronto podria tener una parte en el sistema donde un administrador pueda asignar, otro usuario como administrador, de esta manera Eloquen esta opbligando a hacerlo de forma explicita y no de forma implicita lo cual podria traer un problema de seguridad muy grave en la aplicación.

Eloquent esta diseñado de esta manera para protegernos.

Entonces lo correcto es ejecutar finalmente:

	>>>$user->is_admin = true;
	=> true

Entonces se asigna el atributo "is_admin" con el valor verdadero, si ahora imprimimos ahora lo que tenemos la variable $user veremos que es un usuario que tiene estos tres atributos.

	>>> $user;
	=> App\User {#4134
	     name: "patron",
	     email: "patroncito@shulo.com",
	     is_admin: true,
	   }


Ahora podemos ver que el atributo, is_admin tiene el valor de verdadero.


Ahora para guardar este usuario puedo utilizar elmetodo, "save" que no se ha visto hasta ahora. 

	>>>$user->save();

Notese que este metodo, save se llama directamente en el objeto de usuarios, y no en la clase User, recordando que se explico, en la leccion anterior a que la clase se refiere aproximadamente a la tabla y cada objeto a un registro.

En este caso llamamos al metetdo "save" en un objeto que sea un modelo de Eqloquet.Con ello queremos indicarle a Eloquent que queremos guardar este usuario particularmente en la Base de vez de todos los usuarios.

	>>>  $user->save();
	PHP Deprecated:  The "Doctrine/Common/Inflector/Inflector::pluralize" method is deprecated and will be dropped in doctri
	ne/inflector 2.0. Please update to the new Inflector API. in C:/AppServ/www/dev/CRUDLaravel5.5/vendor/doctrine/inflector
	/lib/Doctrine/Common/Inflector/Inflector.php on line 264
	=> true


Recivimos un "true"	 como respuesta, lo que quiere decir que la operación fue hecha con exito y por lo tanto podemos inspeccionar nuestro administrador de la base de datos.

Al examinar nuevamente los usuarios, que tenemos en la base de datos podemos ver que tenemos un nuevo usuario, con los datos y este es de tipo administrador.

mysql> select * from users;
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
| id | name       | email                | password                                                     | is_admin | remember_token | created_at          | updated_at          | profession_id |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
|  1 | Klvst3r    | klvst3r@email.com    | $2y$10$niwX0EKA6LcZR2IZTSdxueqwCwYmA/xIRXBdnvc2K4jhCFxMi0RKm |        0 | NULL           | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |             1 |
|  2 | un usuario | un@usuario.com       | $2y$10$PzyzcQ3WjXgU9rUvt3BYlOM2u2flDbIa/M1oWvLul1aQdg2RS8Lj6 |        0 | NULL           | 2022-08-08 02:50:34 | 2022-08-08 02:50:34 |          NULL |
|  3 | patron     | patroncito@shulo.com | $2y$10$A3Pxo1/tYy.QMKrpic/ak.pd2MTp1torqspIeBjiTkeyEKfWdE5By |        1 | NULL           | 2022-08-09 05:27:04 | 2022-08-09 05:27:04 |          NULL |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+


Queremos hacer notar que Eloquen es lo sificientemente, inteligente cuando tiene que crear un registro o cuando tiene que actualizarlo. 

Vamos a hacer una prueba de esto.

Vamos a cambiar el nombre de "patron" a "patroncito". 

De vuelta en la consola con tinker:

	>>> $user->'patroncito';

	>>> $user->name ='patroncito';
	=> "patroncito"



Regresando al administrador de la base de datos y volvemos a mostrar los usuarios, podemo ver que no a cambiado el registro:

mysql> select * from users;
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
| id | name       | email                | password                                                     | is_admin | remember_token | created_at          | updated_at          | profession_id |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
|  1 | Klvst3r    | klvst3r@email.com    | $2y$10$niwX0EKA6LcZR2IZTSdxueqwCwYmA/xIRXBdnvc2K4jhCFxMi0RKm |        0 | NULL           | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |             1 |
|  2 | un usuario | un@usuario.com       | $2y$10$PzyzcQ3WjXgU9rUvt3BYlOM2u2flDbIa/M1oWvLul1aQdg2RS8Lj6 |        0 | NULL           | 2022-08-08 02:50:34 | 2022-08-08 02:50:34 |          NULL |
|  3 | patron     | patroncito@shulo.com | $2y$10$A3Pxo1/tYy.QMKrpic/ak.pd2MTp1torqspIeBjiTkeyEKfWdE5By |        1 | NULL           | 2022-08-09 05:27:04 | 2022-08-09 05:27:04 |          NULL |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+


Lo que necesitamos hacer para actualizar en la base de datos es llamar al metodo "save". Una vez hecho esto veremos reflejado el cambio ahora si.


>>>$user->save();

Una vez hecho esto podemos regresar actualizar los datos y ahora podemos ver que el usuario tiene el la modificaciónj realizada.

mysql> select * from users;
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
| id | name       | email                | password                                                     | is_admin | remember_token | created_at          | updated_at          | profession_id |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
|  1 | Klvst3r    | klvst3r@email.com    | $2y$10$niwX0EKA6LcZR2IZTSdxueqwCwYmA/xIRXBdnvc2K4jhCFxMi0RKm |        0 | NULL           | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |             1 |
|  2 | un usuario | un@usuario.com       | $2y$10$PzyzcQ3WjXgU9rUvt3BYlOM2u2flDbIa/M1oWvLul1aQdg2RS8Lj6 |        0 | NULL           | 2022-08-08 02:50:34 | 2022-08-08 02:50:34 |          NULL |
|  3 | patroncito | patroncito@shulo.com | $2y$10$A3Pxo1/tYy.QMKrpic/ak.pd2MTp1torqspIeBjiTkeyEKfWdE5By |        1 | NULL           | 2022-08-09 05:27:04 | 2022-08-09 05:27:04 |          NULL |
+----+------------+----------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+


En Eloquen hay una propiedad llamada, "exist" que va a devolver verdadero si el usuariuo exite, y falso si el usuario no existe. Entonces Eloquent es lo suficientemente liosto para saber cuando tiene que crear o actualizar un registro. 

Por cietto tambien podemos eliminar el regsitro de la siguiente manera.


>>> $user->delete();

Ahora si exploramos el anterior registro ha desaparecido.

>>> $users = User::all();

>>> $user = $users->last();


>>> $user->delete();
=> true

mysql> select * from users;
+----+------------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
| id | name       | email             | password                                                     | is_admin | remember_token | created_at          | updated_at          | profession_id |
+----+------------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
|  1 | Klvst3r    | klvst3r@email.com | $2y$10$niwX0EKA6LcZR2IZTSdxueqwCwYmA/xIRXBdnvc2K4jhCFxMi0RKm |        0 | NULL           | 2022-08-08 02:46:52 | 2022-08-08 02:46:52 |             1 |
|  2 | un usuario | un@usuario.com    | $2y$10$PzyzcQ3WjXgU9rUvt3BYlOM2u2flDbIa/M1oWvLul1aQdg2RS8Lj6 |        0 | NULL           | 2022-08-08 02:50:34 | 2022-08-08 02:50:34 |          NULL |
+----+------------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+

Como podemos ver se ha eliminado el ultimo usuario que se tenie dentro de la varieble "$user".


De nuevo no se quiere cubrir todas las operaciones de Eloquent, pero si de momento las mas importantes y las mas comunes.

Con esto ya tenemos un poco mas de dominio del ORM de Eloquent. Ya se tienen mas recursos para poder practicar. Si pide que se practique hasta poder conseguir y lograr nuevas metas segun nuestras necesitades con nuestro propio sistema en mente.

