33. Manejo de relaciones con el ORM Eloquent

Notas:
======

Las tablas de una base de datos a menudo están relacionadas unas con otras. Por ejemplo, un usuario puede estar asociado a una profesión y una profesión puede tener muchos usuarios asociados. Utilizando el ORM Eloquent podemos hacer que este proceso sea mucho más fácil, trabajando con las relaciones directamente dentro de nuestros modelos (usando Programación Orientada a Objetos) y creando métodos personalizados que nos evitarán tener que construir consultas de forma manual.


Relaciones «Pertenece a»
------------------------

El método «belongsTo» nos permite trabajar con relaciones donde un registro pertenece a otro registro. Este método acepta como primer argumento el nombre de la clase que queremos vincular. Eloquent determina el nombre de la llave foránea a partir del nombre del método (en este caso profession) y agregando el sufijo _id a este:

---
    public function profession()
    {
        return $this->belongsTo(Profession::class);
    }
---
Si en tu base de datos el nombre de la llave foránea no sigue esta convención puedes pasar el nombre de la columna como segundo argumento:
---
    public function profession()
    {
        return $this->belongsTo(Profession::class, 'id_profession');
    }
---

Por otro lado, si el modelo padre no usa una columna id como su llave primaria o quieres relacionar el modelo a una columna diferente, puedes pasar un tercer argumento especificando el nombre de la columna que actuaría como llave del modelo padre:
---
    public function profession()
    {
        return $this->belongsTo(Profession::class, 'profession_name', 'name');
    }
---

En este caso Eloquent buscará la relación entre la columna "profession_name" del modelo Users y la columna "name" del modelo Profession.

Hecho esto, utilizando cualquiera de las formas anteriores, podemos obtener la profesión del usuario:
---
    $user = User::first();
    $user->profession;
---


Relaciones uno a muchos con hasMany
-----------------------------------

Una relación uno a muchos es utilizada cuando un modelo puede tener muchos otros modelos relacionados. Por ejemplo, una profesión puede tener un número indeterminado de usuarios asociados a ésta. Dentro del modelo "Profession" podemos decir que una profesión tiene muchos usuarios:
---
    public function users()
    {
        return $this->hasMany(User::class);
    }
---

Ahora podemos obtener todos los usuarios de una profesión:
---
    $profession = Profession:first();
    $profession->users;
---

Los métodos que nos permiten relacionar un modelo con muchos otros siempre van a retornar una colección, así esté vacía y los métodos que nos permiten relacionar un modelo con otro van a retornar el modelo o "null".



Construir consultas
-------------------
Podemos construir una consulta llamando al método de una relación. Por ejemplo, encadenando el método where() a users() podemos obtener todos los usuarios asociados a una profesión pero que tengan la columna is_admin como true:

---
    $profession->users()->where('is_admin', true)->get();
---

Practica:
=========



Una de las ventajas de trabajar con un ORM como Eloquent es que nos permite crear relaciones entre un modelo y otro. Asi como en nuestro base de datos por ejemplo nosotros relacionamos una tabla de usuarios con un aprofesion, es decir, cada unsuario va a tener asignado una profesión, aunque esto es opcional y nosotros podriamos crear la relación inversa. 

Si nosotros conocemos el id de la profesión podriamos obtener todos los usuarios relacionados o asignados a dicha profesión de nuevo por que la tabla "Users" tenemos la llave foranea "profesion_id". Entonces nosotros podriamos escribir una sentencia SQL como la siguiente:

SELECT * FROM 'users' WHERE profession_id = 1;


Vamos a seleccionar todos los usuarios donde la profesion sea la profesion uno, que en este caso es "Desarrollador Back-end", asi como podemos hacer esta consulta en el modelo entidad - relación que nos brinda la base de datos, nosotros también vamos a poder relacionar objetos con el ORM de Eloquent y esto es muy sencillo y es lo que vamos a aprender en esta sección.

Nuevamente vamos a trabajar con Tinker puesto que es muy practico para colocar estos ejemplos y vamos a obtener el usuario, en este caso el primer usuario que estaguardado en la base de datos. 

>>>

> php artisan thinker

>>> $user = User::first();

 => App\User {#3874
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
     profession_id: 1,
   }

Ahora si yo quisiera obtener la profesión de este usuario, en este caso:

>>>  $user->profession
=> null


Utilizando la propiedad o el atributo "profession" va a devolver null. Peo puedo obtener el id de esta profesión.

>>> $user->profession_id
=> 1

Utilizando este id, yo podria obtener la profesión de esta manera 

>>> Profession::where('id', $user->profession_id)->first()
[!] Aliasing 'Profession' to 'App\Models\Profession' for this Tinker session.


O Como hemos aprendido utilizando el metodo find:

>>> Profession::find($user->profession_id)

Pero primero ejecutar:

 >>> $user = User::first();

 Despues:

 >>> Profession::find($user->profession_id)


Sin embargo esto es algo engorroso.

Que tal si yo pudiera obtener la profesion del usuario de la siguiente manera:

>>> $user->profession

Seria mucho más sencillo.

Resulta que logar esto en Eloquent es muy facil, Simplemente nos vamos a ir al modelo en cuestion en este caso. :

app/User.php

Al modelo de usuario y se declara un nuevo metodo llamado profession:


---app/User.php
...
    
        public static function findByEmail($email)
    {
        return static::where(compact('email'))->first();
    }


    public function profession()
    {
        return $this->belongsTo(Profession::class);
    }

     public function isAdmin(){
        return $this->email === 'klvst3r@email.com';
    }

...
---


Este metodo va retornar el llamado al metodo "belongsTo", el cual va a aceptar como primer argumento el nombre de la clase que yo quiero vincular o enlazar o relacionar con este modelo de usuario de esta manera yo estoy indicando que un usuario pertenece a una profesion y si yo regreso a la consola, cierro tinker, se vuelve a abrir nuevamente, se encuentra el primer usuario en la base de datos que yo se que esta asociado a la profesion 1 

Se guarda el achivo y se vuelve a ejecular lo siguiente:

> php artisan tinker

>>> $user = User::first();

=> App\User {#3874
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
     profession_id: 1,
   }



y ahora nuevamente intento accesar a la profesion de esta manera:

>>> $user->profession
=> App\Profession {#4122
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }


En este caso observamos que se devuelve un objeto que es un modelo de la clase "Profession" y esta es la profesion la cual asignamos al usuario.

Eloquent en este caso va a utilizar el nombre de la relación profession y va a buscar una columna llamada "profession_id" es decir el nombre de la relación + el subfijo (_id) -> profesion_id

Para hacer la busqueda utilizando el modelo o clase Profession

Ahora si en la base de datos la llave foranea no cumple con esta convencion por ejemplo en vez de profession_id se llamara id_profession, en este caso se puede pasar como segundo argumento de la siguiente manera

 ---app/User.php
...
    public function profession()
    {
        return $this->belongsTo(Profession::class, 'id_profession');
    }
...
---


Todo esto se va a dejar en las notas que anteceden a los ejercios de esta sección, en realidad es muy sencillo y muy flexible trabajar con Eloquent, este de hecho el ORM para PHP más flexible que he visto hasta ahora, lo que quiere decir que es conveniente mas no obligatorio utilizar las convensiones que propone Eloquent, en este caso definimos la relación que un usuario pertenece a una professión, pero nosotros tambien podemos especificar la relación contraria en el modelo Profession podemos decir que una profesion tiene muchos usuarios y esto lo vamos a lograr con el metodo "hasMany()".

---app/Profession.php

public function users()
    {
        return $this->hasMany(User::class);
    }


---

Que nuevamente va a aceptar como primer argumento el nombre de la clase que queremos relacionar, en este caso el modelo de usuario.

Notemos que se esta declarando el metodo users() en plural por que voy a decir que una profesion tiene muchos usuarios mientras que en el  modelo de User entonces como un un usuari puede tener una sola profesión o pertenecer a una sola profesión en ste caso estoy declarando el metodo en singular, estos pequeños detalles 



---app/User.php
public function profession()
{
    return $this->belongsTo(Profession::class);
}
---

Si se toman en cuenta a la larga pueden mejorar muchisimo la legibilidad del codigo o si no los tienes en cuenta y se ignoran completamente pueden entonces traer el efecto contrario y hacer que el codigo sea dificil de leer y de entender.

Recapitulando, en nuestro modelo de usuarios hemos definido una relación para indicar que un usuario pertenece a una profesion y en nuestro modelo Profession se ha definido otra relación 

---app/User.php
public function profession()
{
    return $this->belongsTo(Profession::class); 
}
---


---app/Profession.php
public function users()
{
    return $this->hasMany(User::class);
}
---

Para indicar que una profesión tiene muchos usuarios, entonces yo puedo regresar a la consola y volver a acceder a tinker y por ejemplo obtener la primera Professión registrada en la base de datos

***___________________Inicia Parentesis____________________________***
> php artisan tinker

$user = User::first();

>>> $profession = Profession::first();
=> App\Models\Profession {#3874
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }


Despues de haber creado el modelo de Usuario con el metodo llamado profession podemos hacer los siguiente:

> php artisan tinker
------------------

>>> $user = User::first();
=> App\User {#3874
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
     profession_id: 1,
   }

----------------

>>> $user->profession;
=> App\Profession {#4122
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }

-----------------
>>> $user->profession
=> App\Profession {#4122
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }
-----------------
>>> $user->profession_id;
=> 1

----------------
>>>  Profession::where('id', $user->profession_id)->first()
=> App\Models\Profession {#4130
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }

---------------
>>> Profession::find($user->profession_id)
=> App\Models\Profession {#3193
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }
---------------
>>>  $user->profession
=> App\Profession {#4122
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }
>>>
---------------- 


***__________________Concluye Parentesis____________________________***



> php artisan tinker

>>> $profession = Profession::first();

=> App\Models\Profession {#4130
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }
>>>


A continuación puedo obtener todos los usuarios asociados a esta professión de la siguiente manera.



>>> $profession->users;
=> Illuminate\Database\Eloquent\Collection {#4126
     all: [
       App\Models\User {#4123
         id: 1,
         name: "Klvst3r",
         email: "klvst3r@email.com",
         is_admin: 0,
         created_at: "2022-08-21 02:01:20",
         updated_at: "2022-08-21 02:01:20",
         profession_id: 1,
       },
     ],
   }
>>>

Trabajand desde ahora solamente con los Modelos 

app/Models/Profession.php
y
app/Models/User.php


El Error se corrige cuando corrijo en el Modelo Profession el namespace ya que solo apuntaba a 
    
---app/Models/Profession.php
    namespace App;
---

Se corrige por 

---app/Models/Profession.php
    namespace App\Models;
---


----------------------

Notemos que en el caso anterior se obtiene un objeto de la clase Collection



>>> $profession->users;
=> Illuminate\Database\Eloquent\Collection {#4126
...


Cuando utilizamos la relación hasMany, mientras que si yo obtengo el primer usuario o cualquier usuario en el sistema:

>>> $user = User::first();
=> App\User {#3874
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
     profession_id: 1,
   }
>>>


Y luego quiero obtener su profesion :

>>> $user->profession;
=> App\Profession {#4122
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }
>>>


Como estamos utilizando el metodo belongsTo para indicar que un usuario pertenece a una unica profesion, en este caso obtenemos como resultado un modelo de Eloquent

    "=> App\Profession"

Y esta es una de tantas cuestiones que mas confunde a las personas que estan aprndiendo Laravel. Esperando que esto no suceda esperando que se vea la diferencia. 

A continuación puedo obtener todos los usuarios asociados a esta professión de las siguiente manera:

>>>$profession->users;
=> Illuminate\Database\Eloquent\Collection {#4121
     all: [
       App\Models\User {#4122
         id: 1,
         name: "Klvst3r",
         email: "klvst3r@email.com",
         is_admin: 0,
         created_at: "2022-08-21 02:01:20",
         updated_at: "2022-08-21 02:01:20",
         profession_id: 1,
       },
     ],
   }
>>>

Notemos que en este caso que tenemos un objeto de la clase collelation

    "=> Illuminate\Database\Eloquent\Collection {#4121"

Cuanod utilizamos la relación hasMany, mientras que si yo obtengo el primer usuario o cualquier usuario del sistema:

>>> $user = User::first();




Y luego quiero obtener su profesion 

>>> $user->profession;
=> App\Profession {#4141
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",



 Como estamos utilizando el metodo belongsTo para indicar que un usuario pertenece a una unica profession en este caso obtenemos directamente como resultado un modelo de Eloquent 

    "=> App\Profession {#4141"

Y esta es una de las cuestiones que mas confunde a las personas que estan apendiendo Laravel, esperando que esto no suceda esperando se pueda ver la diferencia:

>>> $profession->users;
=> Illuminate\Database\Eloquent\Collection {#4121
     all: [
       App\Models\User {#4122
         id: 1,
         name: "Klvst3r",
         email: "klvst3r@email.com",
         is_admin: 0,
         created_at: "2022-08-21 02:01:20",
         updated_at: "2022-08-21 02:01:20",
         profession_id: 1,
       },
     ],
   }


Utilizando la relación hasMany, en este caso para indicar que una professión puede tener muchos usuarios obtenemos una colección:

    "=> Illuminate\Database\Eloquent\Collection {#4121"

Incluso aunque a esta profesión no este asociada a ningun usuario 
vamos a obtener una coleccion. Cuando trabajamos con la la relación belongsTo, entonces obtenemos un modelo y si este usuario no esta relacionado con ninguna profesión, entonces vamos a obtener "null" vamos a ver esto rapidamente:

Vamos a modificar el usuario, para indicar que la professión va a ser null:

    >>>  $user->profession_id = null;
    => null

Y luego vamos a guardar este usuario en la base de datos:

    >>>  $user->save();
    => true

Si ahora regresamos a la base de datos y hacemos una selección de los usuarios:


mysql> SELECT * FROM users;
+----+---------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
| id | name    | email             | password                                                     | is_admin | remember_token | created_at          | updated_at          | profession_id |
+----+---------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+
|  1 | Klvst3r | klvst3r@email.com | $2y$10$e4FI03iSqrlrXBb87gjDXeTdQAgWSiyqIL.7GwMhKr5ZqL57xCrJa |        0 | NULL           | 2022-08-21 02:01:20 | 2022-08-25 01:43:53 |          NULL |
+----+---------+-------------------+--------------------------------------------------------------+----------+----------------+---------------------+---------------------+---------------+


Podemos ver que este usuario ya no esta asociado a ninguna professión si ahora regresamos a tinker y tulizamos:

>>> $user->profession
=> App\Profession {#4141
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
   }

Veremos que volvemos a obtener la professión. Esto es por que Laravel va a almacenar esta profesión en cache, aunque yo puedo por ejemplo utilizar el metodo refresh 

para recargar este modelo con atributos frescos:

>>> $user->refresh();
=> App\User {#3193
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-25 01:43:53",
     profession_id: null,
     profession: null,
   }
>>>


Provenientes de la base de datos y ahora entonces vamos a llamar a user->profession:

>>> $user->profession
=> null

Ahora se esta devolviendo null, mientras que si llamamos al metodo refresh, en el modelo profession:

>>> $profession->refresh();
=> App\Models\Profession {#4124
     id: 1,
     title: "Back-end developer",
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-21 02:01:20",
     users: Illuminate\Database\Eloquent\Collection {#4139
       all: [],
     },
   }
>>>


Para recargar sus atributos y relaciones. Y ahora utilizo:

>>> $profession->users;
=> Illuminate\Database\Eloquent\Collection {#4139
     all: [],
   }



En este caso se esta devolviendo una colección a pesar de que la coleción esta vacia. Observando esto, los metodos que permiten relacionar un  modelo con muchos otros modelos como ejemplo hasMany, y belongsToMany, en este caso siempre van a retornar una coleción, asi la colección este vacia: Mientrs que los metodos que nos permiten relacionar un modelo con otro como por ejemplo "hasOne" o "belongsTo" en este caso van a retornar dicho modelo o null.

Hay otra diferencia importante que tambien se debe observar. Nuevamente se tiene un usuario en la variable user

>>> $user
=> App\User {#3193
     id: 1,
     name: "Klvst3r",
     email: "klvst3r@email.com",
     is_admin: 0,
     created_at: "2022-08-21 02:01:20",
     updated_at: "2022-08-25 01:43:53",
     profession_id: null,


Ahora si intentamos acceder a la pofesión:

>>> $user->profession
=> null
>>>


En este caso obtenemos null por que no tenemos una professión asociada. Pero notemos que aca hay no se esta utilizando el metodo profession, si no que se esta accediendo a profession como si se tratara de una propiedad dentro de la clase. Nuevamente Eloquent va a utilizar metodos magicos para que esto funcione. Pero cual es la diferencia entre acceder a profesion como si se tratase de una propiedad dentro de la clase.

Nuevamente Eloquent va a utilizar metodos magicos para que esto funcione. Pero cual es la diferencia entre acceder a profesion como si se tratase de una propiedad versus acceder al metodo profession. Si nosotros llamamos al metodo profession vamos a obtener una instancia de la relación en este caso:

    >>> $user->profession();
    => Illuminate\Database\Eloquent\Relations\BelongsTo {#3874}

Del objeto belongsTo, y lo mismo sucede en este caso con nuestro objeto "profession":

    >>> $profession
    => App\Models\Profession {#4124
         id: 1,
         title: "Back-end developer",
         created_at: "2022-08-21 02:01:20",
         updated_at: "2022-08-21 02:01:20",
         users: Illuminate\Database\Eloquent\Collection {#4139
           all: [],
         },
       }
    >>>


Si yo utilizo:

   >>> $profession->users
    => Illuminate\Database\Eloquent\Collection {#4139
         all: [],
       }
    >>>


Si salimos de tinker, recarhamos los valoes a los objetos con:

>>> $user = User::first();

>>> $profession = Profession::first();


Ahora si continuamos con:

    >>> $profession->users
    => Illuminate\Database\Eloquent\Collection {#4123
         all: [],
       }
    >>>


Como si se tratara de una propiedad voy a obtener la colección vacia o con usuarios.

Pero si yo llamo al metodo users:

    >>> $profession->users()
    => Illuminate\Database\Eloquent\Relations\HasMany {#3913}
    >>>

    
Voy a obtener un objeto de la relación en cuestion que en este caso es: HasMany

    "=> Illuminate\Database\Eloquent\Relations\HasMany"

Y esto tiene una ventaja.

Vamos a demostrar como funciona. Pero para ello vamos a necesitar agegar otros usuarios a la base de datos:

Asi que hacemos:

Desde el editor y vamos a modificar UserSedder, para agregar al menos dos usuarios mas:


/database/seeds/UserSeeder.php
---
        User::create([
            'name' => 'Klvst3r',
            'email' => 'klvst3r@email.com',
            'password' => bcrypt('laravel'),
            'profession_id' => $professionId,
            'is_admin' => true,
       ]);
            
      User::create([
                'name' => 'Alizeth Sofia',
                'email' => 'alizh@email.com',
                'password' => bcrypt('laravel'),
                'profession_id' => $professionId
           ]);

       User::create([
                'name' => 'Josue Rodrigo',
                'email' => 'josh@email.com',
                'password' => bcrypt('laravel'),
                'profession_id' => null
           ]);
      

---

Con nombres de usuario diferentes y correos electronicos unico, el ultimo registro tendra profesion_id null y el primer registro sera administrador.

Por cierto de vuelta al modelo de usuario, anteriormente deciamos que un usuario era administrador si el email de dicho usuario era 'klvst3r@gmail.com'. 

Esto en:

app/User.php

 public function isAdmin(){
        return $this->email === 'klvst3r@email.com';
    }
    
Pero en este caso ya tenemos una propiedad para ello por ello actualizamos con la siguiente propiedad:

Se cambia a:

  public function isAdmin(){
        return $this->is_admin;
    }

De regreso fuera de tinker vamos a ejecutar:

    >  php artisan db:seed
    Seeding: ProfessionSeeder
    Seeding: UserSeeder


Regresamos a tinker:

    > php artisan tinker

Y en este caso yo puedo obtener una profesion de la siguiente manera:

    >>> $profession = Profession::first();
    => App\Models\Profession {#3874
         id: 1,
         title: "Back-end developer",
         created_at: "2022-08-25 02:26:33",
         updated_at: "2022-08-25 02:26:33",
       }
    >>>

En este caso es la profesion de desarrollador back-end con el id = 1, y puedo obtener todos los usuarios a dicha profession de la siguiente forma:

    >>> $profession->users
    => Illuminate\Database\Eloquent\Collection {#4123
         all: [
           App\Models\User {#4122
             id: 1,
             name: "Klvst3r",
             email: "klvst3r@email.com",
             is_admin: 1,
             created_at: "2022-08-25 02:26:33",
             updated_at: "2022-08-25 02:26:33",
             profession_id: 1,
           },
           App\Models\User {#4127
             id: 2,
             name: "Alizeth Sofia",
             email: "alizh@email.com",
             is_admin: 0,
             created_at: "2022-08-25 02:26:33",
             updated_at: "2022-08-25 02:26:33",
             profession_id: 1,
           },
         ],
       }
    >>>


Se puede ver que se tienen a dos usuarios inclueyendo al administrador y que ambos tienen la profesion 1 en el campo: profession_id: 1,

Pero notese que no se obtubo el tercer usuario por que este tercer usuario no esta relacionado con dicha profesion al tener profession_id: null.

Ahora la ventaja en este caso de poder llamar al metodo:

>>> $profession->users();
=> Illuminate\Database\Eloquent\Relations\HasMany {#3194}

Es que aca no se esta ejecutando una consulta, si no que uno puede comenzar a construir una, en este caso yo puedo por ejemplo encadenar al metodo where y luego llamar al metodo get:

    >>> $profession->users()->where('is_admin')->get();
    => Illuminate\Database\Eloquent\Collection {#4121
         all: [],
       }

Cuando se ejecute el metodo get entonces si se va a ejecutar la consulta SQL, pero se esta alterando la relación. En la consulta anterior se le esta pidiendo a Eloquent que me traiga todos los usuarios asociados a esta profesión pero que tengan la columna "is_admin" con el vaor verdadero:

    >>> $profession->users()->where('is_admin', true)->get();


De esta manera vamos a poder obntener todos los desarrolladores back-end que ademas sean administradores en el sistema:


    >>> $profession->users()->where('is_admin', true)->get();
    => Illuminate\Database\Eloquent\Collection {#3194
         all: [
           App\Models\User {#4124
             id: 1,
             name: "Klvst3r",
             email: "klvst3r@email.com",
             is_admin: 1,
             created_at: "2022-08-25 02:26:33",
             updated_at: "2022-08-25 02:26:33",
             profession_id: 1,
           },
         ],
       }
    >>>


Como se puede ver en la ejecuación anterior, donde se esta obteniendo un solo resultado en lugar de dos como se obtuvo anteriormente. Por que este usuario es tanto Back-Developer, como administrador:


...
   is_admin: 1,
   ...
   profession_id: 1,
...


La consulta que se ejecuto utilizando la relación es similar a hacerlo de la siguiente manera:



    >>>  User::where(['profession_id' => 1, 'is_admin' => true])->get();
    => Illuminate\Database\Eloquent\Collection {#3514
         all: [
           App\User {#4125
             id: 1,
             name: "Klvst3r",
             email: "klvst3r@email.com",
             is_admin: 1,
             created_at: "2022-08-25 02:26:33",
             updated_at: "2022-08-25 02:26:33",
             profession_id: 1,
           },
         ],
       }
    >>>

Notese que es el mismo resultado, pero lo importante aca es que cada vez nos alejamos mas de SQL e interactuamos mas con la interfaz orientada a objetos del ORM Eloquent.








Ejercicios:
===========

Primero enpttre equipos de computo para cargar tabla de datos

php artisan migrate:fresh

php artisan migrate:refresh

php artisan db:seed

composer dump-autoload

php artisan tinker

$professions = Profession::all();

$professions // alias del comando anterior

$professions->first(); // Obtenemos el primer resultado

$professions->last(); // Obtenemos el último resultado

$professions->random(1); // Obtenemos un resultado aleatorio

$professions->pluck('title'); //Devuelve un listado de los titulos de los profesionales

collect(['Klvst3r', 'crudlaravel', 'Laravel']); //Crea una coleccion manual

$user = User::find(1); //Devuelve los datos del usuario cuando el id = 1

$user->isAdmin(); // Devuelve true o false en este caso como es administytador devuelve "true"

Profession::all(); // Devuelve la información contenida de las profesiones titulo creada y actualizada

$professions; // Devuelve las profesiones dentro del alias declarado

$titles = $professions->pluck('title'); // crea y muestra las profesiones dentro del alias titles

$titles // CReado el alias puede funcionar como el comando anterior a este que se esta ejecutando

$backendDeveloper = Profession::where('title', 'Back-end developer')->first(); // Se crea el alias backendDeveloper y devuelve el primer registro de profesiones donde el titulo sea "Back-end developer"

DB::table('professions')->where('title', 'Back-end developer')->first(); // Misca consulta con el constructor de consultas ORM Eloquent

 $user = User::first(); // obtendremos el primer usuario que se tiene en la base de datos con Eloquent

$user = User::find(1); //primer usuario tiene el id:1

$user->isAdmin();

User::all(); // misca consulta




Preguntas
=========

1. Se puede tener una clave foránea que tengan referencia a la clave primaria de la misma tabla?

"Self-Referential Integrity Constraints"



2. Para los que estan iniciando con la vercion actual la forma de hacer el belongsTo es return $this->belongsTo('App\Profession'); el cual pueden ver en este link

https://laravel.com/docs/5.8/eloquent-relationships


3. Me pasa algo que no puedo comprender, al hacer lo siguiente en tinder $user = User::first(); todo ok, pero al hacer $profession = Profession::first(); sale el siguiente mensaje de error:

[!] Aliasing 'Profession' to 'App\Models\Profession' for this Tinker session.
ErrorException with message 'include(/home/claudio/Datos/www/curso-styde/vendor/composer/../../app/Models/Profession.php): failed to open stream: No such file or directory'

Hola! confirma que tu modelo Profession está ubicado en el directorio app/Models y tiene el namespace App\Models\Profession



4. Me sucede lo siguiente, para que funcione bien debo tener 2 Profession.php, 1 en App y otro en App/Models/, si solo lo tengo en App/Models , esto no funciona $user->profession

>>> $user->profession
PHP Warning: include(/home/claudio/Datos/www/curso-styde/vendor/composer/../../app/Profession.php): failed to open stream: No such file or directory in /home/claudio/Datos/www/curso-styde/vendor/composer/ClassLoader.php on line 444

y al tenerlo también en App

>> $user->profession
=> App\Profession {#2856
id: 1,
title: "Desarrolador back-end",
created_at: "2019-04-08 15:47:43",
updated_at: "2019-04-08 15:47:43",
}


si esto no funciona $user->profession es porque tienes mal definida la relación en el modelo User. Si estas usando el directorio Models para almacenar todos tus modelos debes asegurarte que todos tengan el namespace correcto y en todas partes que lo llames importes la clase correcta Lo ideal es que estén en un solo sitio


5. Sigo con el inconveniente, he hecho lo siguiente:
Tengo los 2 modelos en App con namespace App;
En Profession.php tengo:
protected $fillable = ['title'];

public function users()
{
return $this->hasMany(User::class);
}

en User.php

public function profession()
{
return $this->belongsTo(Profession::class);
}


ejecuta composer dump-autoload para que se carguen las clases que realmente existe. Otra cosa puede ser que al trabajar con Tinker y haces un cambio en el código debes salir de la sesión de Tinker y volver a entrar para que se tomen los cambios que has hecho

OK, Gracias, ahi se solucionó

Ya lo solucioné, al parecer el titulo de la profesión no estaba escrito de la misma forma en la base de datos que en UserSeeder, copie el de la base de datos y lo peque en el archivo y eso se solucionó.

Muchas Gracias por toda tu ayuda, ya está funcionando todo ok.



6. Buenas alguien podria ayudarme con un caso de base de datos, quiero generar un pdf con la librería DomPDF pero al cargar una gran cantidad de datos se me pega el programa con un mensaje de error de Time Out, hay algunas forma de cargar pocos datos al pdf y luego ir cargando lo demás pero poco a poco?

Puedes probar ajustando el valor de set_time_limit a uno mayor o generando el documento por parte. Otro detalle que debes tener en cuenta es si el error es generado por DomPDF como tal o porque el computador donde te encuentras no tiene la capacidad suficiente para procesarlo.


7. Tengo el mismo problema al generar pdf con DomPDF, incrementé memoria con el set_time_limit, cuando pasa a la vista en el uso de relaciones tarda mucho en completar la vista, verifique el tiempo de la consulta y no demora, pero cuando pasa a generar el pdf que es donde uso varias relaciones es donde tarda demasiado, no se de que manera se puede optimizar, estaba pensando en extraer todos los datos en la consulta y ya no usar relaciones ya que en este caso no es muy eficaz, alguna recomendación?

Amigo ayer probé el generador de pdf SNNAPY y funcionó muy bien, me cargos más de 2000 artículos en segundos, el problema está en que no se como instalarlo al servidor para hacerlo generalizado para todos.


8. existe alguna pagina donde estén las reglas para nombrar los nombres de las tablas, las variables, los controladores y los modelos, el standard que se usa, creo que tiene un nombre esas reglas.

Se llaman convenciones

https://styde.net/convenciones-de-nombres-de-eloquent-en-laravel/


9. tengo entendido que los modelos son en singular en inglés y las migraciones se crean en plural.

En relación a este tema, decir que el plural en ingles es siempre añadiendo una s pero en castellano a veces se añade "es". Ejemplo Autor, Autores. Así que es una razón más para utilizar nombres en ingles. Pero me resisto un poco ya que el inglés se me resiste a mí. Cuando se tienen unos cuantos años como es mi caso y no se ha aprendido, se hace duro... ¿Es mucho problema usar nombres de tablas y campos en castellano?

el problema reside mas en la lectura, por ejemplo una tabla llamada "birthdays" como seria en español "cumpleaños" o "cumpleanos"? el primero tiene ñ cosa que no debe tener como nombre una tabla el segundo no leo bien o si? lo mismo aplica para los atributos, pero al final es cosa de cada programador como nombrar las tablas, modelos, atributos, etc!


10. la forma de proceder frente a los id es que en cada tabla el campo id solo se llame "id" y cuando tenga un campo relacionado sea "nombre_del_campo_relacionado_id" ?

Exactamente así es



11. si establezco relaciones entre clases su archivo del modelo correspondiente, ¿para que estas funcionen deben existir previamente, en el archivo de migración, las llaves foráneas entre dichas clases en cuestión?

me parece que es lo recomendable pero no es obligatorio.

En realidad no es obligatorio, pero sí es muy recomendable hacerlo, para optimizar las consultas, como explicamos en nuestro libro de SQL

https://leanpub.com/aprende-mysql/


12. En que casos es recomendable usar el metodo "with"


Solución al problema de N+1 con Eager Loading en Laravel



Cuando trabajamos con ORMs -como Eloquent- obtenemos la ventaja de hacer consultas de modelos relacionados fácilmente pero con la desventaja que no sabemos a simple vista cómo se están haciendo dichas consultas.

 Laravel por defecto, realiza «lazy loading» o una carga de los datos de modelos relacionados solo cuando accedes a ellos. 

 Esto produce que se hagan N consultas extra por la cantidad de registros que se relacionan con el otro modelo. 

 Son consultas adicionales que se hacen a la base de datos y no importan mucho cuando estamos desarrollando pero cuando tenemos la aplicación en producción podría afectar el desempeño. 
