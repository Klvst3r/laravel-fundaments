0.5.1.1 Configurando Git por primera vez
-----------------------
Ahora que ya se tiene Git en su sistema, va a querer hacer algunas cosas para personalizar su entorno de Git. Es necesario hacer estas cosas solamente una vez en tu computadora, y se mantendrán entre actualizaciones. También puede cambiarlas en cualquier momento volviendo a ejecutar los comandos correspondientes.

Git trae una herramienta llamada git config, que le permite obtener y establecer variables de configuración que controlan el aspecto y funcionamiento de Git. Estas variables pueden almacenarse en tres sitios distintos:

 - Archivo /etc/gitconfig: Contiene valores para todos los usuarios del sistema y todos sus repositorios. Si pasa la opción --system a git config, lee y escribe específicamente en este 	archivo.

 - Archivo ~/.gitconfig o ~/.config/git/config: Este archivo es específico de su usuario. Puede hacer que Git lea y escriba específicamente en este archivo pasando la opción --global.

  - Archivo config en el directorio de Git (es decir, .git/config) del repositorio que estés utilizando actualmente: Este archivo es específico del repositorio actual.

Cada nivel sobrescribe los valores del nivel anterior, por lo que los valores de .git/config tienen preferencia sobre los de /etc/gitconfig.

En sistemas Windows, Git busca el archivo .gitconfig en el directorio $HOME (para mucha gente será (C:\Users\$USER). También busca el archivo /etc/gitconfig, aunque esta ruta es relativa a la raíz MSys, que es donde decidiste instalar Git en tu sistema Windows cuando se ejecuto el instalador.

La Identidad en Git, configurando el nombre de usuario en Git
--------------------

Lo primero que deberá hacer cuando instales Git es establecer su nombre de usuario y dirección de correo electrónico. Esto es importante porque los "commits" de Git usan esta información, y es introducida de manera inmutable en los commits que envía:

	$ git config --global user.name "Klvst3r"
	$ git config --global user.email klvstr3r@klvst3r.io

De nuevo, sólo necesita hacer esto una vez si especificas la opción --global, ya que Git siempre usará esta información para todo lo que hagas en ese sistema. Si se quiere sobrescribir esta información con otro nombre o dirección de correo para proyectos específicos, puede ejecutar el comando sin la opción --global cuando esté en ese proyecto.

Muchas de las herramientas de interfaz gráfica le ayudarán a hacer esto la primera vez que la use.

El Editor
-----------

Ahora que su identidad está configurada, puedes elegir el editor de texto por defecto que se utilizará cuando Git necesite que introduzcas un mensaje. Si no indicas nada, Git usará el editor por defecto de tu sistema, que generalmente es Vim. Si quieres usar otro editor de texto como Emacs, puedes hacer lo siguiente:

$ git config --global core.editor emacs

Nota

Vim y Emacs son editores de texto frecuentemente usados por desarrolladores en sistemas basados en Unix como Linux y Mac. Si no está familiarizado con ninguno de estos editores o está en un sistema Windows, durante la instalación grafica se realiza esta configuración, pero puede establecerse la siguiente linea:


$ git config --global core.editor="C:\\Program Files\\Sublime Text\\subl.exe" -w

Si quieres comprobar tu configuración, puedes usar el comando git config --list para mostrar todas las propiedades que Git ha configurado:

$ git config --list
user.name=Klvst3r
user.email=klvst3r@klvst3r.io
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...

Puede que vea claves repetidas, porque Git lee la misma clave de distintos archivos (/etc/gitconfig y ~/.gitconfig, por ejemplo). En estos casos, Git usa el último valor para cada clave única que ve.

También puede comprobar el valor que Git utilizará para una clave específica ejecutando git config <key>:

$ git config user.name
	Klvst3r


Empezando el trabajo con Git
======================


Configuración rápida al iniciar un nuevo proyecto.

Comience creando un nuevo archivo o cargando un archivo existente. Recomendamos que cada repositorio incluya un LÉAME, LICENCIA y .gitignore.

Creando un proyecto desde un repositorio local a remoto con Github, tomando como ejemplo de proyecto "CRUDLaravel5.5."

a) Para crear un nuevo repositorio en la línea de comandos
-----------
	echo "# CRUDLaravel5.5" >> README.md
	git init
	git add README.md
	git commit -m "first commit"
	git branch -M main
	git remote add origin git@github.com:Klvst3r/CRUDLaravel5.5.git
	git push -u origin main


b)Para insertar un repositorio existente desde la línea de comando
-----------
	git remote add origin git@github.com:Klvst3r/CRUDLaravel5.5.git
	git branch -M main
	git push -u origin main


c) Importar código de otro repositorio como GitLab
-------------
Puede inicializar este repositorio con código de un proyecto de Subversion, Mercurial o TFS.



Configuraciones generales con GitLab
======================


También puede cargar archivos existentes desde su computadora siguiendo las instrucciones a continuación.
Configuración global de Git

	git config --global user.name "Klvst3r"
	git config --global user.email "klvst3r@gmail.com"


- Crear un nuevo repositorio desde gitlab

	git clone https://gitlab.com/Klvst3r/CRUDLaravel5.5.git
	cd siop
	git switch -c main
	touch README.md
	git add README.md
	git commit -m "add README"
	git push -u origin main

- Empujar una carpeta existente

	cd existing_folder
	git init --initial-branch=main
	git remote add origin https://gitlab.com/Klvst3r/CRUDLaravel5.5.git
	git add .
	git commit -m "Initial commit"
	git push -u origin main

- Empuje un repositorio Git existente

	cd existing_repo
	git remote rename origin old-origin
	git remote add origin https://gitlab.com/Klvst3r/CRUDLaravel5.5.git
	git push -u origin --all
	git push -u origin --tags



- Creando un repositorio vacion en GitLab

	cd existing_repo
	git remote add origin https://gitlab.com/Klvst3r/CRUDLaravel5.5.git
	git branch -M main
	git push -uf origin main

Observaciones:
En algunas ocaciones vamos a necesitar importar el proyecto de un equipo a otro, sin afectar los cambios, en lo personal suelo hacer lo siguiente.

1. Se realiza la conación del proyecto y en la plataforma referida por ejemplo de git mediante ssh:
	git clone git@github.com:Klvst3r/CRUDLaravel5.5.git

2. En la carpeta local renombramos el proyecto teniando en consideración que se tiene un proyecto paralelo cfreado en la plaforma destino, tomaremos como ejemplo el nombre del proyecto "local.CRUDLaravel5.5.git"	

3. Se mueve el contenidio de una carpeta a otra.
	cd local.CRUDLaravel5.5
	mv *.* ..\CRUDLaravel5.5

4. Ya con el nuevo contenido nos movemos a la carpeta reciente.
	cd ..
	cd CRUDLaravel5.5

5. Retomamos el proyecto	
	git status
	git add .
	git commit -m "Reiniciando proyecto"
	git push -u origin main
	
Con estos pasos tendremos la nueva versión disponible para actualizarse en el reposioterio remoto.



Primeros pasos con el proyecto:
---------------------

Git es un sistema de control de versiones muy potente y sin duda el más usado en la actualidad que nos permite llevar un registro histórico de todos los cambios realizados en cada uno de los archivos a lo largo del desarrollo de un proyecto. A su vez, git ofrece una gran solución a la hora de trabajar de forma colaborativa como parte de un equipo de desarrollo, permitiendo que cada persona escriba código de forma independiente que puede ser integrado y compartido de manera muy fácil y rápida.

Git, GitHub y Gitlab

GitHubes una plataforma web que nos permite alojar código fuente de forma gratuita en la nube haciendo uso del sistema de control de versiones Git. Funciona como una red social donde se pueden compartir proyectos con la idea de que otros usuarios colaboren con el desarrollo.

El registro básico de GitHub es gratuito y nos da acceso a la creación de repositorios públicos de forma ilimitada, para repositorios privados se debe adquirir un plan de pago.

Crear un repositorio en GitHub

Lo primero que se debe hacer es crear una cuenta de usuario ingresando al siguiente enlace

https://github.com/

y configurar las variables globales de git en local, como nombre de usuario.

$ git config --global user.name "tu_usuario"
$ git config --global user.email tu@email.com


Una vez hecho esto podemos proceder a nuestro primer repositorio. Desde la barra de navegación hacemos click en enlace “New repository”

menu-nuevo-repositorio

En el siguiente formulario especificamos los detalles del proyecto y es recomendable siempre incluir el archivo readme.md desde el inicio donde se escribirán las instrucciones de instalación, uso e información sobre la licencia del código que contiene el repositorio, solo debemos darle check en “Initialize this repository with a REDAME”.

	nuevo-repositorio-git

Luego de esto ya tendremos creado nuestro primer repositorio en GitHub, Buen trabajo!!!

	vista-repositorio-github

Desde esta pantalla podemos realizar varias acciones relacionadas al repo recién creado que iremos explicando en su momento a lo largo de esta serie.

	Clonar repositorio en local

Debemos tener instalado Git en nuestra máquina local, si aun no lo tienes puedes descargarlo desde el siguiente enlace para Windows, linux o mac.

	http://git-scm.com/downloads

Una vez instalado abrimos la consola de comandos (si estas en windows usa el Git Bash).

Si usas la consola de git desde Windos puedes pegar código haciendo click derecho en la cabecera de la ventana.

Creamos un directorio que contendrá el código del proyecto y nos posicionamos dentro de él y ejecutamos git init para trabajar con el control de versiones, tomando como ejemplo que el nombre del proyecto es "CRUDLaravel5.5"

	$ mkdir CRUDLaravel5.5
	$ cd CRUDLaravel5.5
	$ git init
	$ mkdir CRUDLaravel5.5
	$ cd CRUDLaravel5.5
	$ git init


Clonar un repositorio
--------------
Para clonar el repo hacemos uso de la url que vemos resaltada en la imagen anterior y desde la consola le indicamos a git que ese es nuestro repo remoto.

	$ git remote add origin https://github.com/klvst3r/CRUDLaravel5.5.git


Ahora copiamos el código que tenemos en remoto (en este caso esta únicamente el archivo readme.md) a nuestra máquina

$ git pull origin main


"main" es la rama principal de nuestro proyecto y es la rama en donde deben ir únicamente los cambios finales y versiones terminadas del código sin bugs. a nivel local también se crea por defecto una rama master. 

Si todo sale bien podremos ver algo como esto en la carpeta del proyecto.

	ls-CRUDLaravel5.5-repo-git

Cambios y primer commit
---------------------
Veamos un ejemplo rápido:

Podemos crear un archivo index.html y escribir dentro de él algo simple como “Hola mundo” y ver que sucede con git.

	$ git status

Nos dice que tenemos un archivo sin seguimiento, debemos agregarlo a la lista de seguimiento para enviarlo posteriormente

	$ git add index.html


si queremos agregar todos los archivos pendientes podemos usar

	$ git add -A
 o bien:

	$ git add .

y verificamos nuevamente el status

	$ git status

Los commit son básicamente los cambios que registramos a lo largo del desarrollo, cada commit debe ir acompañado de un mensaje, ya que tenemos listos nuestros cambios podemos registrar y enviar nuestro primer commit.

	$ git commit -m "este es mi primer comit sobre la creacion del archivo index.html"


y para enviarlo al repo remoto

	$ git push origin master


ahora podemos ingresar nuevamente a GitHub y ver los cambios

Cada commit será un estado en la línea de tiempo del proyecto a la que podemos volver si algo sale mal, es recomendable trabajar en bloques pequeños de desarrollo y hacer commit sobre cada bloque terminado, por ejemplo puedes iniciar con “login de usuarios” y luego enviar “login terminado”.

También es una buena práctica trabajar cada bloque en una rama independiente antes de fusionarlo con la rama master, hablaremos del uso de ramas más adelante.

Si desea trabajar con repositorios privados pero no deseas pagar por una suscripción en GitHub puedes usar Bitbucket es muy recomendado, su funcionamiento es genial y permite crear repositorios privados de forma gratuita, el concepto es el mismo por lo que te será fácil aplicar lo que viste aquí sin ningún problema.


Crear un token de acceso personal
----------------------

En ocaciones sera comun establecer momunicación con el repositorio de github, ya sea desde un equipo remoto o bien desde una aplicación o servicio, y como requisito necesario es logearse a github mediante las credenciales respectiva.

Un metodo de autenticarse con github es mediante un token de acceso personal por lo que vermemos como poder crear una llave de acceso con esta opción:

Para crear un token de acceso personal para utilizar como contraseña con la línea de comandos o con la API es necesario establecerlo mediante el CLI de GitHub para autenticarte en GitHub en la línea de comandos, se puede omitir el generar un token de acceso personal y autenticarse a través del buscador web en su lugar.

Los tokens de acceso personal (PAT) son una alternativa al uso de contraseñas para la autenticación en GitHub cuando utilizas la API de GitHub o la línea de comandos.

Si se quiere utilizar un PAT para acceder a los recursos que pertenecen a una organización que utiliza el SSO de SAML, debe autorizarlo. 

Como medida precautoria de seguridad, GitHub elimina automáticamente los tokens de acceso personal que no se hayan utilizado en un año. Para proporcionar seguridad adicional, le recomendamos ampliamente agregar un vencimiento a tus tokens de acceso personal.

Un token sin alcances asignados solo puede acceder a información pública. Para usar tu token para acceder a repositorios desde la línea de comando, selecciona repo. Para obtener más información, consulta la sección "Alcances disponibles".


Crear un token desde github
---------------
- Verifica tu dirección de correo electrónico, si aún no ha sido verificada.

	1. En la esquina superior derecha de cualquier página, da clic en tu foto de perfil y después da clic en Configuración.
	2. En la sección de "Acceso" de la barra lateral, haz clic en "Correos electrónicos".
	3. Debajo de su dirección de correo electrónico, dar clic en Reenviar correo de verificación. 
		Si todo es exitoso la leyenda sera algo como "Your email was verified"

- Posterior a la verificación de correo. En la esquina superior derecha de cualquier página, da clic en tu foto de perfil y después da clic en Configuración.
- En la barra lateral izquierda, haz clic en "Ajustes de desarrollador".
- En la barra lateral izquierda, da clic en Tokens de acceso personal. 
- Haz clic en Generar un nuevo token. Generar el botón para el nuevo token
- Asígnale a tu token un nombre descriptivo. 
- Para dar un vencimiento a tu token, selecciona el menú desplegable de Vencimiento y luego haz clic en uno predeterminado o utiliza el selector de calendario. 
- Selecciona los alcances o permisos que deseas otorgarle a este token. Para usar tu token para acceder a repositorios desde la línea de comando, selecciona repo.
- Haz clic en Generar token. 
- Para utilizar tu token o autenticarte en una organización que utilice el inicio de sesión único de SAML, autoriza el token


Usar un token en la línea de comando
------------------
Una vez que se tenga un token, puede ingresarlo en lugar de su contraseña cuando realice operaciones de Git a través de HTTPS.

Por ejemplo, en la línea de comando ingresará lo siguiente:

	$ git clone https://github.com/username/repo.git
	Username: your_username
	Password: your_token

Los tokens de acceso personal solo se pueden usar para operaciones HTTPS Git. Si su repositorio usa una URL SSH remota, necesitarás pasar de la URL SSH remota a HTTPS.

Si no se te solicita su nombre de usuario y contraseña, tus credenciales pueden estar almacenadas en la caché de su computadora. 
Puedes actualizar tus credenciales en la keychain para reemplazar su contraseña anterior con el token.

En vez de ingresar su PAT manualmente para cada operación de HTTPS de Git, puedes almacenarlo en caché con un cliente de Git. Git almacenará sus credenciales temporalmente en la memoria hasta que haya pasado un intervalo de vencimiento. 
También puede almacenar el token en un archivo de texto simple que pueda leer Git antes de cada solicitud. 

Con estos simples pasos podremos trabajar ya con nuestro sistema de control de versiones.
