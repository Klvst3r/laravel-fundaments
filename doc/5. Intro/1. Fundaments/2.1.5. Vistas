4. Vistas


Index
=====

http://127.0.0.1:8000/api/books

Se tiene un array vacio y sin error en el acceso de la BD y a la estructura de la tabla books

Esta vacio por que no se tienen ningun libro en la BD

Se crea un registro inicial


INSERT INTO `books` (`id`, `title`, `created_at`, `updated_at`) VALUES (NULL, 'Book 1', '2022-11-01 20:19:04', '2022-11-01 20:19:04');


Si regresamos al navegador y actualizamos:

 [{"id":1,"title":"Book 1","created_at":"2022-11-01T20:19:04.000000Z","updated_at":"2022-11-01T20:19:04.000000Z"}]


 0	
id	1
title	"Book 1"
created_at	"2022-11-01T20:19:04.000000Z"
updated_at	"2022-11-01T20:19:04.000000Z"

Para visualizar mejor el texto formateado en JASON aplicamos con el plugin

https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa/related?hl=es

El resulytado sera:

[
{
"id": 1,
"title": "Book 1",
"created_at": "2022-11-01T20:19:04.000000Z",
"updated_at": "2022-11-01T20:19:04.000000Z"
}
]



Vista Show
==========

En la vista se esta inyectando el modelo Book 

Desde BookController

 public function show(Book $book)
    {
        
    }


Podemos ver que se esta inyectando el modelo Book con un libro

public function show(Book $book)
    {
        return $book;
    }

En el navegador


http://127.0.0.1:8000/api/books/1
---

	{
	"id": 1,
	"title": "Book 1",
	"created_at": "2022-11-01T20:19:04.000000Z",
	"updated_at": "2022-11-01T20:19:04.000000Z"
	}
---

Se observa que se tiene el JSON con los datos del libro con el ID 1 que en si es un array de objetos que sera un libro n

Algo a tener en cuenta, es que si nosotros no inyectamos 

y hacemos 

public function show($book)
    {
        return $book;
    }
 Se vera solo el identificador, ya que al momento de defirnir la ruta al momento de acceder a la ruta show, se recibe la variable book que es un numero y eso es lo que recibimos y si no se agrega  este roundbinding tambien se pude directamente  hacer:

 public function show($book)
    {
        return Book::find($book);
    }

 De esta forma encontramos un libro con el id indeicado, en este caso 1


 {
"id": 1,
"title": "Book 1",
"created_at": "2022-11-01T20:19:04.000000Z",
"updated_at": "2022-11-01T20:19:04.000000Z"
}


Tambien se puede hacer de la siguiente forma:

 public function show($book)
    {
        return Book::find(1);
    }

Ya que es la variable que se le pasa como parametro que es el que se recibe, pero en caso de hacer el RoundBidding nos ahorramos este paso por lo que de deja finalemente:

public function show(Book $book)
    {
        return $book;
    }


    Ahora se crea otro libro en la BD para poder revisar

INSERT INTO `books` (`id`, `title`, `created_at`, `updated_at`) VALUES (NULL, 'Book 2', '2022-11-01 20:19:04', '2022-11-01 20:19:04');

Para visualizarlos en el navegador:

http://127.0.0.1:8000/api/books/

	[
	{
	"id": 1,
	"title": "Book 1",
	"created_at": "2022-11-01T20:19:04.000000Z",
	"updated_at": "2022-11-01T20:19:04.000000Z"
	},
	{
	"id": 2,
	"title": "Book 2",
	"created_at": "2022-11-01T20:19:04.000000Z",
	"updated_at": "2022-11-01T20:19:04.000000Z"
	}
	]


Si se accede a:
http://127.0.0.1:8000/api/books/2

{
"id": 2,
"title": "Book 2",
"created_at": "2022-11-01T20:19:04.000000Z",
"updated_at": "2022-11-01T20:19:04.000000Z"
}


Ya tenemos las dos rutas Index y show


Casi nunca se utiliza l vista 

 public function index()
    {
        
        return Book::all();
    }

Por que al tener muchos datos con informacion de los libros, esto disminuiria el desempe√±o de la API, por lo que se recomienda utilizar es paginate ()



