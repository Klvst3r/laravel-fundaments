8. Metodo de actualización 

Podemos copiar el codigo del Storage dentro del Metodo Update tendremos


    public function update(Request $request, Book $book)
    {
        //return 'patch';
        

       	return $book;

        $request->validate([
            'title' => ['required']

        ]);

        

        $book = new Book; //Nueva instancia de Eloquent 
        $book->title = $request->input('title'); //obtencion de los datos
        $book->save(); //Se guarda el valor en la BD

        

        return $book; //Se devuelve el valor del libro

    
        
    }


 La diferencia es que en el metodo anterior se obtiene el libro de manera automatica ya que ahora es con el verbo PATCH


---
 public function update(Request $request, Book $book)
---


 PATCH:  http://127.0.0.1:8000/api/books/2

 El resultado sera:

 {
    "id": 2,
    "title": "Book 2",
    "created_at": "2022-11-01T20:19:04.000000Z",
    "updated_at": "2022-11-01T20:19:04.000000Z"
}

Si solo tuvieramos:

 public function update(Request $request, $book)

 Solo se visualizaria el ID

 Se hace la misma validación y en lugar de crear un nuevo libro se utiliza el que ya se tiene quitando la siguiente linea

 y queando:

 ---
     public function update(Request $request, Book $book)
    {
        //return 'patch';
        
        return $book;
        

        $request->validate([
            'title' => ['required']

        ]);

        
        $book->title = $request->input('title'); //obtencion de los datos
        $book->save(); //Se guarda el valor en la BD



        return $book; //Se devuelve el valor del libro

    
        
    }


 ---



  En Postman


PATCH: http://127.0.0.1:8000/api/books/2
Pero en Body:

KEY:title
Value: Book 2 - Updated


Nos mostrara un error y es que PATCH y PUT funcionan de forma distinta por lo que arrojara;

---
{
    "message": "El campo title es obligatorio",
    "errors": {
        "title": [
            "El campo title es obligatorio"
        ]
    }
}
---

Pero debemos utilizar la opcion con el body con :
	x-www-form-urlencoded

Copiamos los valores:

KEY:title
Value: Book 2 - Updated


Ahora si funciona:

Resultado:
{
    "id": 2,
    "title": "Book 2 - Updated",
    "created_at": "2022-11-01T20:19:04.000000Z",
    "updated_at": "2022-11-07T03:11:10.000000Z"
}



Si observamos en la BD

MariaDB [books]> select * from books;
+----+------------------+---------------------+---------------------+
| id | title            | created_at          | updated_at          |
+----+------------------+---------------------+---------------------+
|  1 | Book 1           | 2022-11-01 20:19:04 | 2022-11-01 20:19:04 |
|  2 | Book 2 - Updated | 2022-11-01 20:19:04 | 2022-11-07 03:11:10 |
|  3 | Book 3           | 2022-11-07 02:40:25 | 2022-11-07 02:40:25 |
|  4 | Book 4           | 2022-11-07 02:45:16 | 2022-11-07 02:45:16 |
|  5 | Book 5           | 2022-11-07 03:00:41 | 2022-11-07 03:00:41 |
+----+------------------+---------------------+---------------------+
5 rows in set (0.001 sec)


Ahora ya estan actualizados los datos en especifico el campo 2 que fue el que se envio a actualizar la informacion dle titulo